// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  password     String
  name         String
  cpf          String?  @unique
  age          Int?
  school       String?
  class        String?
  avatar       String?
  userType     UserType @default(STUDENT)
  institutionId String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relacionamentos
  institution    Institution? @relation(fields: [institutionId], references: [id])
  userSports     UserSport[]
  userScores     UserScore[]
  userProgress   UserProgress[]
  chatMessages   ChatMessage[]
  teacherClasses TeacherClass[]
  classes        Class[]
  classStudents  ClassStudent[]

  @@map("users")
}

model Sport {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon        String?
  color       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  userSports   UserSport[]
  contents     Content[]
  userScores   UserScore[]

  @@map("sports")
}

model UserSport {
  id        String   @id @default(cuid())
  userId    String
  sportId   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  // Relacionamentos
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  sport Sport @relation(fields: [sportId], references: [id], onDelete: Cascade)

  @@unique([userId, sportId])
  @@map("user_sports")
}

model Content {
  id          String   @id @default(cuid())
  sportId     String
  title       String
  description String?
  type        ContentType
  difficulty  Difficulty @default(BEGINNER)
  duration    Int? // em minutos
  instructions String?
  videoUrl    String?
  imageUrl    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  sport Sport @relation(fields: [sportId], references: [id], onDelete: Cascade)

  @@map("contents")
}

model UserScore {
  id        String   @id @default(cuid())
  userId    String
  sportId   String
  score     Int
  level     Int
  createdAt DateTime @default(now())

  // Relacionamentos
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  sport Sport @relation(fields: [sportId], references: [id], onDelete: Cascade)

  @@map("user_scores")
}

model UserProgress {
  id          String   @id @default(cuid())
  userId      String
  contentId   String?
  sportId     String?
  progress    Int      @default(0) // 0-100
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_progress")
}

model ChatMessage {
  id        String   @id @default(cuid())
  userId    String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relacionamentos
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model TeacherClass {
  id          String   @id @default(cuid())
  teacherId   String
  date        DateTime
  school      String
  grade       String
  subject     String?
  time        String?
  isCompleted Boolean  @default(false)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  teacher User @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@map("teacher_classes")
}

model Class {
  id            String   @id @default(cuid())
  name          String
  description   String?
  teacherId     String
  institutionId String
  school        String
  grade         String
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relacionamentos
  teacher     User           @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  institution Institution    @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  students    ClassStudent[]

  @@map("classes")
}

model ClassStudent {
  id        String   @id @default(cuid())
  classId   String
  studentId String
  joinedAt  DateTime @default(now())
  isActive  Boolean  @default(true)

  // Relacionamentos
  class    Class @relation(fields: [classId], references: [id], onDelete: Cascade)
  student  User  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([classId, studentId])
  @@map("class_students")
}

enum ContentType {
  WARMUP
  TRAINING
  COOLDOWN
  TUTORIAL
  EXERCISE
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

model Institution {
  id          String   @id @default(cuid())
  name        String
  cnpj        String   @unique
  email       String   @unique
  password    String
  phone       String?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  users  User[]
  classes Class[]

  @@map("institutions")
}

enum UserType {
  STUDENT
  TEACHER
  INSTITUTION
}
