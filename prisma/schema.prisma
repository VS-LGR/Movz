// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  password     String
  name         String
  cpf          String?  @unique
  age          Int?
  school       String?
  class        String?
  avatar       String?
  userType     UserType @default(STUDENT)
  institutionId String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Sistema de XP e Personalização
  totalXP      Int      @default(0)
  level        Int      @default(1)
  cardBackground String? @default("default")
  cardAnimation  String? @default("none")

  // Relacionamentos
  institution    Institution? @relation(fields: [institutionId], references: [id])
  userSports     UserSport[]
  userScores     UserScore[]
  userProgress   UserProgress[]
  chatMessages   ChatMessage[]
  teacherClasses TeacherClass[]
  classes        Class[]
  classStudents  ClassStudent[]
  classScores    ClassScore[]
  teacherScores  ClassScore[] @relation("ClassScoreTeacher")
  attendances    Attendance[]
  teacherAttendances Attendance[] @relation("AttendanceTeacher")
  userAchievements UserAchievement[]
  userMedals      UserMedal[]

  @@map("users")
}

model Sport {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon        String?
  color       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  userSports   UserSport[]
  contents     Content[]
  userScores   UserScore[]
  classScores  ClassScore[]

  @@map("sports")
}

model UserSport {
  id        String   @id @default(cuid())
  userId    String
  sportId   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  // Relacionamentos
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  sport Sport @relation(fields: [sportId], references: [id], onDelete: Cascade)

  @@unique([userId, sportId])
  @@map("user_sports")
}

model Content {
  id          String   @id @default(cuid())
  sportId     String
  title       String
  description String?
  type        ContentType
  difficulty  Difficulty @default(BEGINNER)
  duration    Int? // em minutos
  instructions String?
  videoUrl    String?
  imageUrl    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  sport Sport @relation(fields: [sportId], references: [id], onDelete: Cascade)

  @@map("contents")
}

model UserScore {
  id        String   @id @default(cuid())
  userId    String
  sportId   String
  score     Int
  level     Int
  createdAt DateTime @default(now())

  // Relacionamentos
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  sport Sport @relation(fields: [sportId], references: [id], onDelete: Cascade)

  @@map("user_scores")
}

model UserProgress {
  id          String   @id @default(cuid())
  userId      String
  contentId   String?
  sportId     String?
  progress    Int      @default(0) // 0-100
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_progress")
}

model ChatMessage {
  id        String   @id @default(cuid())
  userId    String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relacionamentos
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model TeacherClass {
  id          String   @id @default(cuid())
  teacherId   String
  classId     String?  // ID da turma associada à aula
  date        String   // Data como string para evitar problemas de fuso horário
  school      String
  grade       String
  subject     String?
  time        String?
  isCompleted Boolean  @default(false)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  teacher     User         @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  class       Class?       @relation(fields: [classId], references: [id], onDelete: SetNull)
  attendances Attendance[]

  // Constraint única: uma turma só pode ter uma aula por dia
  @@unique([classId, date], name: "class_date_unique")
  @@map("teacher_classes")
}

model Class {
  id            String   @id @default(cuid())
  name          String
  description   String?
  teacherId     String
  institutionId String
  school        String
  grade         String
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relacionamentos
  teacher     User           @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  institution Institution    @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  students    ClassStudent[]
  scores      ClassScore[]
  attendances Attendance[]
  teacherClasses TeacherClass[]

  @@map("classes")
}

model ClassStudent {
  id        String   @id @default(cuid())
  classId   String
  studentId String
  joinedAt  DateTime @default(now())
  isActive  Boolean  @default(true)

  // Relacionamentos
  class    Class @relation(fields: [classId], references: [id], onDelete: Cascade)
  student  User  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([classId, studentId])
  @@map("class_students")
}

model ClassScore {
  id          String   @id @default(cuid())
  classId     String
  studentId   String
  sportId     String
  score       Int      // Pontuação dada pelo professor (0-100)
  notes       String?  // Observações do professor
  teacherId   String   // Professor que deu a pontuação
  lessonDate  DateTime @default(now()) // Data da aula específica
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  class    Class @relation(fields: [classId], references: [id], onDelete: Cascade)
  student  User  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  sport    Sport @relation(fields: [sportId], references: [id], onDelete: Cascade)
  teacher  User  @relation("ClassScoreTeacher", fields: [teacherId], references: [id], onDelete: Cascade)

  // Permitir múltiplas pontuações por esporte (removido unique constraint)
  @@map("class_scores")
}

model Attendance {
  id             String   @id @default(cuid())
  classId        String   // ID da turma (para compatibilidade)
  teacherClassId String?  // ID da aula específica (NOVO CAMPO)
  studentId      String
  isPresent      Boolean  @default(true)
  lessonDate     DateTime @default(now()) // Data da aula
  notes          String?  // Observações sobre a presença
  teacherId      String   // Professor que registrou a presença
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relacionamentos
  class        Class        @relation(fields: [classId], references: [id], onDelete: Cascade)
  teacherClass TeacherClass? @relation(fields: [teacherClassId], references: [id], onDelete: Cascade)
  student      User         @relation(fields: [studentId], references: [id], onDelete: Cascade)
  teacher      User         @relation("AttendanceTeacher", fields: [teacherId], references: [id], onDelete: Cascade)

  // Evitar presenças duplicadas na mesma aula específica (quando teacherClassId existe)
  @@unique([teacherClassId, studentId], name: "attendance_teacher_class_unique")
  @@map("attendances")
}

enum ContentType {
  WARMUP
  TRAINING
  COOLDOWN
  TUTORIAL
  EXERCISE
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

model Institution {
  id          String   @id @default(cuid())
  name        String
  cnpj        String   @unique
  email       String   @unique
  password    String
  phone       String?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  users  User[]
  classes Class[]

  @@map("institutions")
}

enum UserType {
  STUDENT
  TEACHER
  INSTITUTION
}

// Sistema de Medalhas e Conquistas
model Achievement {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  category    String
  rarity      String
  color       String
  requirement String
  xpReward    Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  userAchievements UserAchievement[]

  @@map("achievements")
}

model Medal {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  category    String
  rarity      String
  color       String
  requirement String
  xpReward    Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  userMedals UserMedal[]

  @@map("medals")
}

model UserAchievement {
  id            String   @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())
  isActive      Boolean  @default(true)

  // Relacionamentos
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model UserMedal {
  id        String   @id @default(cuid())
  userId    String
  medalId   String
  unlockedAt DateTime @default(now())
  isActive  Boolean  @default(true)

  // Relacionamentos
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  medal Medal @relation(fields: [medalId], references: [id], onDelete: Cascade)

  @@unique([userId, medalId])
  @@map("user_medals")
}

// Sistema de Personalização de Cards
model CardCustomization {
  id          String   @id @default(cuid())
  name        String
  description String
  type        String   // "background" ou "animation"
  rarity      String   // "common", "rare", "epic", "legendary"
  unlockType  String   // "xp", "achievement", "medal", "score"
  unlockValue Int      // Valor necessário para desbloquear
  unlockTarget String? // ID específico (achievement, medal, etc.)
  preview     String   // URL ou path da preview
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([name, type])
  @@map("card_customizations")
}
