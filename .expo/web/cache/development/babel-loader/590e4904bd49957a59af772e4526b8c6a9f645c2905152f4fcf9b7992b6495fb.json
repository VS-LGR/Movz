{"ast":null,"code":"var _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _require = require('child_process'),\n  spawn = _require.spawn;\nvar fetch = require('node-fetch');\nconsole.log('üöÄ Iniciando teste completo do sistema...\\n');\nvar wait = function wait(ms) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, ms);\n  });\n};\nfunction testAPI() {\n  return _testAPI.apply(this, arguments);\n}\nfunction _testAPI() {\n  _testAPI = _asyncToGenerator(function* () {\n    try {\n      console.log('1. Testando API...');\n      var response = yield fetch('http://localhost:3001/health');\n      var data = yield response.json();\n      console.log('‚úÖ API funcionando:', data.status);\n      return true;\n    } catch (error) {\n      console.log('‚ùå API n√£o est√° funcionando:', error.message);\n      return false;\n    }\n  });\n  return _testAPI.apply(this, arguments);\n}\nfunction testDatabase() {\n  return _testDatabase.apply(this, arguments);\n}\nfunction _testDatabase() {\n  _testDatabase = _asyncToGenerator(function* () {\n    try {\n      console.log('2. Testando banco de dados...');\n      var _require2 = require('@prisma/client'),\n        PrismaClient = _require2.PrismaClient;\n      var prisma = new PrismaClient();\n      var userCount = yield prisma.user.count();\n      var sportCount = yield prisma.sport.count();\n      var contentCount = yield prisma.content.count();\n      console.log('‚úÖ Banco funcionando:');\n      console.log(`   - Usu√°rios: ${userCount}`);\n      console.log(`   - Esportes: ${sportCount}`);\n      console.log(`   - Conte√∫dos: ${contentCount}`);\n      yield prisma.$disconnect();\n      return true;\n    } catch (error) {\n      console.log('‚ùå Banco n√£o est√° funcionando:', error.message);\n      return false;\n    }\n  });\n  return _testDatabase.apply(this, arguments);\n}\nfunction testUserRegistration() {\n  return _testUserRegistration.apply(this, arguments);\n}\nfunction _testUserRegistration() {\n  _testUserRegistration = _asyncToGenerator(function* () {\n    try {\n      console.log('3. Testando registro de usu√°rio...');\n      var userData = {\n        name: 'Teste Usu√°rio',\n        email: 'teste@exemplo.com',\n        password: '123456',\n        age: 25,\n        school: 'Escola Teste',\n        class: 'Turma A'\n      };\n      var response = yield fetch('http://localhost:3001/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n      var result = yield response.json();\n      if (result.success) {\n        console.log('‚úÖ Registro funcionando');\n        console.log('   - Usu√°rio criado:', result.data.user.name);\n        console.log('   - Token gerado:', result.data.token ? 'Sim' : 'N√£o');\n        return true;\n      } else {\n        console.log('‚ùå Erro no registro:', result.message);\n        return false;\n      }\n    } catch (error) {\n      console.log('‚ùå Erro no teste de registro:', error.message);\n      return false;\n    }\n  });\n  return _testUserRegistration.apply(this, arguments);\n}\nfunction runTests() {\n  return _runTests.apply(this, arguments);\n}\nfunction _runTests() {\n  _runTests = _asyncToGenerator(function* () {\n    console.log('Iniciando testes...\\n');\n    var apiWorking = yield testAPI();\n    if (!apiWorking) {\n      console.log('\\n‚ùå API n√£o est√° funcionando. Execute: node api/simple-server.js');\n      return;\n    }\n    yield wait(1000);\n    var dbWorking = yield testDatabase();\n    if (!dbWorking) {\n      console.log('\\n‚ùå Banco n√£o est√° funcionando. Execute: npm run db:seed');\n      return;\n    }\n    yield wait(1000);\n    var registrationWorking = yield testUserRegistration();\n    console.log('\\nüìä Resumo dos testes:');\n    console.log(`API: ${apiWorking ? '‚úÖ' : '‚ùå'}`);\n    console.log(`Banco: ${dbWorking ? '‚úÖ' : '‚ùå'}`);\n    console.log(`Registro: ${registrationWorking ? '‚úÖ' : '‚ùå'}`);\n    if (apiWorking && dbWorking && registrationWorking) {\n      console.log('\\nüéâ Todos os testes passaram! O sistema est√° funcionando corretamente.');\n      console.log('\\nüì± Para testar o frontend:');\n      console.log('1. Execute: npm run web');\n      console.log('2. Acesse: http://localhost:19006');\n      console.log('3. Teste o cadastro e login');\n    } else {\n      console.log('\\n‚ö†Ô∏è  Alguns testes falharam. Verifique os erros acima.');\n    }\n  });\n  return _runTests.apply(this, arguments);\n}\nrunTests().catch(console.error);","map":{"version":3,"names":["_require","require","spawn","fetch","console","log","wait","ms","Promise","resolve","setTimeout","testAPI","_testAPI","apply","arguments","_asyncToGenerator","response","data","json","status","error","message","testDatabase","_testDatabase","_require2","PrismaClient","prisma","userCount","user","count","sportCount","sport","contentCount","content","$disconnect","testUserRegistration","_testUserRegistration","userData","name","email","password","age","school","class","method","headers","body","JSON","stringify","result","success","token","runTests","_runTests","apiWorking","dbWorking","registrationWorking","catch"],"sources":["C:/Users/lukag/OneDrive/√Årea de Trabalho/Muvz_App/test-complete.js"],"sourcesContent":["// Script para testar o sistema completo\r\nconst { spawn } = require('child_process');\r\nconst fetch = require('node-fetch');\r\n\r\nconsole.log('üöÄ Iniciando teste completo do sistema...\\n');\r\n\r\n// Fun√ß√£o para aguardar\r\nconst wait = (ms) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\n// Fun√ß√£o para testar API\r\nasync function testAPI() {\r\n  try {\r\n    console.log('1. Testando API...');\r\n    const response = await fetch('http://localhost:3001/health');\r\n    const data = await response.json();\r\n    console.log('‚úÖ API funcionando:', data.status);\r\n    return true;\r\n  } catch (error) {\r\n    console.log('‚ùå API n√£o est√° funcionando:', error.message);\r\n    return false;\r\n  }\r\n}\r\n\r\n// Fun√ß√£o para testar banco de dados\r\nasync function testDatabase() {\r\n  try {\r\n    console.log('2. Testando banco de dados...');\r\n    const { PrismaClient } = require('@prisma/client');\r\n    const prisma = new PrismaClient();\r\n    \r\n    const userCount = await prisma.user.count();\r\n    const sportCount = await prisma.sport.count();\r\n    const contentCount = await prisma.content.count();\r\n    \r\n    console.log('‚úÖ Banco funcionando:');\r\n    console.log(`   - Usu√°rios: ${userCount}`);\r\n    console.log(`   - Esportes: ${sportCount}`);\r\n    console.log(`   - Conte√∫dos: ${contentCount}`);\r\n    \r\n    await prisma.$disconnect();\r\n    return true;\r\n  } catch (error) {\r\n    console.log('‚ùå Banco n√£o est√° funcionando:', error.message);\r\n    return false;\r\n  }\r\n}\r\n\r\n// Fun√ß√£o para testar registro de usu√°rio\r\nasync function testUserRegistration() {\r\n  try {\r\n    console.log('3. Testando registro de usu√°rio...');\r\n    \r\n    const userData = {\r\n      name: 'Teste Usu√°rio',\r\n      email: 'teste@exemplo.com',\r\n      password: '123456',\r\n      age: 25,\r\n      school: 'Escola Teste',\r\n      class: 'Turma A'\r\n    };\r\n\r\n    const response = await fetch('http://localhost:3001/api/auth/register', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(userData),\r\n    });\r\n\r\n    const result = await response.json();\r\n    \r\n    if (result.success) {\r\n      console.log('‚úÖ Registro funcionando');\r\n      console.log('   - Usu√°rio criado:', result.data.user.name);\r\n      console.log('   - Token gerado:', result.data.token ? 'Sim' : 'N√£o');\r\n      return true;\r\n    } else {\r\n      console.log('‚ùå Erro no registro:', result.message);\r\n      return false;\r\n    }\r\n  } catch (error) {\r\n    console.log('‚ùå Erro no teste de registro:', error.message);\r\n    return false;\r\n  }\r\n}\r\n\r\n// Fun√ß√£o principal\r\nasync function runTests() {\r\n  console.log('Iniciando testes...\\n');\r\n  \r\n  // Teste 1: API\r\n  const apiWorking = await testAPI();\r\n  if (!apiWorking) {\r\n    console.log('\\n‚ùå API n√£o est√° funcionando. Execute: node api/simple-server.js');\r\n    return;\r\n  }\r\n  \r\n  await wait(1000);\r\n  \r\n  // Teste 2: Banco de dados\r\n  const dbWorking = await testDatabase();\r\n  if (!dbWorking) {\r\n    console.log('\\n‚ùå Banco n√£o est√° funcionando. Execute: npm run db:seed');\r\n    return;\r\n  }\r\n  \r\n  await wait(1000);\r\n  \r\n  // Teste 3: Registro de usu√°rio\r\n  const registrationWorking = await testUserRegistration();\r\n  \r\n  console.log('\\nüìä Resumo dos testes:');\r\n  console.log(`API: ${apiWorking ? '‚úÖ' : '‚ùå'}`);\r\n  console.log(`Banco: ${dbWorking ? '‚úÖ' : '‚ùå'}`);\r\n  console.log(`Registro: ${registrationWorking ? '‚úÖ' : '‚ùå'}`);\r\n  \r\n  if (apiWorking && dbWorking && registrationWorking) {\r\n    console.log('\\nüéâ Todos os testes passaram! O sistema est√° funcionando corretamente.');\r\n    console.log('\\nüì± Para testar o frontend:');\r\n    console.log('1. Execute: npm run web');\r\n    console.log('2. Acesse: http://localhost:19006');\r\n    console.log('3. Teste o cadastro e login');\r\n  } else {\r\n    console.log('\\n‚ö†Ô∏è  Alguns testes falharam. Verifique os erros acima.');\r\n  }\r\n}\r\n\r\n// Executar testes\r\nrunTests().catch(console.error);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}