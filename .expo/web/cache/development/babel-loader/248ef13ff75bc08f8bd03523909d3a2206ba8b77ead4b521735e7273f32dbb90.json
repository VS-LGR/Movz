{"ast":null,"code":"var _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nvar express = require('express');\nvar bcrypt = require('bcryptjs');\nvar jwt = require('jsonwebtoken');\nvar prisma = require(\"../prisma\");\nvar router = express.Router();\nvar authenticateToken = function authenticateToken(req, res, next) {\n  var authHeader = req.headers['authorization'];\n  var token = authHeader && authHeader.split(' ')[1];\n  if (!token) {\n    return res.status(401).json({\n      success: false,\n      message: 'Token de acesso necessário'\n    });\n  }\n  jwt.verify(token, process.env.JWT_SECRET || 'fallback-secret', function (err, user) {\n    if (err) {\n      return res.status(403).json({\n        success: false,\n        message: 'Token inválido ou expirado'\n      });\n    }\n    req.user = user;\n    next();\n  });\n};\nvar requireTeacher = function requireTeacher(req, res, next) {\n  if (req.user.userType !== 'TEACHER') {\n    return res.status(403).json({\n      success: false,\n      message: 'Acesso negado. Apenas professores podem acessar esta funcionalidade.'\n    });\n  }\n  next();\n};\nrouter.get('/', authenticateToken, requireTeacher, function () {\n  var _ref = _asyncToGenerator(function* (req, res) {\n    try {\n      var _req$query = req.query,\n        month = _req$query.month,\n        year = _req$query.year;\n      var whereClause = {\n        teacherId: req.user.userId\n      };\n      if (month && year) {\n        var startDate = new Date(year, month - 1, 1);\n        var endDate = new Date(year, month, 0);\n        whereClause.date = {\n          gte: startDate,\n          lte: endDate\n        };\n      }\n      var classes = yield prisma.teacherClass.findMany({\n        where: whereClause,\n        orderBy: {\n          date: 'asc'\n        }\n      });\n      var classesByDate = {};\n      classes.forEach(function (cls) {\n        var dateStr = cls.date.toISOString().split('T')[0];\n        classesByDate[dateStr] = {\n          id: cls.id,\n          school: cls.school,\n          grade: cls.grade,\n          subject: cls.subject,\n          isCompleted: cls.isCompleted,\n          notes: cls.notes\n        };\n      });\n      res.json({\n        success: true,\n        data: classesByDate\n      });\n    } catch (error) {\n      console.error('Erro ao buscar aulas:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  });\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}());\nrouter.post('/', authenticateToken, requireTeacher, function () {\n  var _ref2 = _asyncToGenerator(function* (req, res) {\n    try {\n      var _req$body = req.body,\n        date = _req$body.date,\n        school = _req$body.school,\n        grade = _req$body.grade,\n        subject = _req$body.subject,\n        notes = _req$body.notes;\n      if (!date || !school || !grade) {\n        return res.status(400).json({\n          success: false,\n          message: 'Data, escola e série são obrigatórios'\n        });\n      }\n      var classDate = new Date(date);\n      var existingClass = yield prisma.teacherClass.findFirst({\n        where: {\n          teacherId: req.user.userId,\n          date: classDate\n        }\n      });\n      var classData;\n      if (existingClass) {\n        classData = yield prisma.teacherClass.update({\n          where: {\n            id: existingClass.id\n          },\n          data: {\n            school: school,\n            grade: grade,\n            subject: subject || null,\n            notes: notes || null\n          }\n        });\n      } else {\n        classData = yield prisma.teacherClass.create({\n          data: {\n            teacherId: req.user.userId,\n            date: classDate,\n            school: school,\n            grade: grade,\n            subject: subject || null,\n            notes: notes || null\n          }\n        });\n      }\n      res.status(201).json({\n        success: true,\n        message: existingClass ? 'Aula atualizada com sucesso' : 'Aula criada com sucesso',\n        data: classData\n      });\n    } catch (error) {\n      console.error('Erro ao criar/atualizar aula:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  });\n  return function (_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nrouter.delete('/:id', authenticateToken, requireTeacher, function () {\n  var _ref3 = _asyncToGenerator(function* (req, res) {\n    try {\n      var id = req.params.id;\n      var existingClass = yield prisma.teacherClass.findFirst({\n        where: {\n          id: id,\n          teacherId: req.user.userId\n        }\n      });\n      if (!existingClass) {\n        return res.status(404).json({\n          success: false,\n          message: 'Aula não encontrada'\n        });\n      }\n      yield prisma.teacherClass.delete({\n        where: {\n          id: id\n        }\n      });\n      res.json({\n        success: true,\n        message: 'Aula removida com sucesso'\n      });\n    } catch (error) {\n      console.error('Erro ao remover aula:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  });\n  return function (_x5, _x6) {\n    return _ref3.apply(this, arguments);\n  };\n}());\nrouter.put('/:id/complete', authenticateToken, requireTeacher, function () {\n  var _ref4 = _asyncToGenerator(function* (req, res) {\n    try {\n      var id = req.params.id;\n      var isCompleted = req.body.isCompleted;\n      var existingClass = yield prisma.teacherClass.findFirst({\n        where: {\n          id: id,\n          teacherId: req.user.userId\n        }\n      });\n      if (!existingClass) {\n        return res.status(404).json({\n          success: false,\n          message: 'Aula não encontrada'\n        });\n      }\n      var updatedClass = yield prisma.teacherClass.update({\n        where: {\n          id: id\n        },\n        data: {\n          isCompleted: Boolean(isCompleted)\n        }\n      });\n      res.json({\n        success: true,\n        message: isCompleted ? 'Aula marcada como concluída' : 'Aula marcada como não concluída',\n        data: updatedClass\n      });\n    } catch (error) {\n      console.error('Erro ao atualizar status da aula:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  });\n  return function (_x7, _x8) {\n    return _ref4.apply(this, arguments);\n  };\n}());\nrouter.get('/stats', authenticateToken, requireTeacher, function () {\n  var _ref5 = _asyncToGenerator(function* (req, res) {\n    try {\n      var _req$query2 = req.query,\n        month = _req$query2.month,\n        year = _req$query2.year;\n      var whereClause = {\n        teacherId: req.user.userId\n      };\n      if (month && year) {\n        var startDate = new Date(year, month - 1, 1);\n        var endDate = new Date(year, month, 0);\n        whereClause.date = {\n          gte: startDate,\n          lte: endDate\n        };\n      }\n      var totalClasses = yield prisma.teacherClass.count({\n        where: whereClause\n      });\n      var completedClasses = yield prisma.teacherClass.count({\n        where: _objectSpread(_objectSpread({}, whereClause), {}, {\n          isCompleted: true\n        })\n      });\n      var upcomingClasses = yield prisma.teacherClass.count({\n        where: _objectSpread(_objectSpread({}, whereClause), {}, {\n          isCompleted: false,\n          date: {\n            gte: new Date()\n          }\n        })\n      });\n      res.json({\n        success: true,\n        data: {\n          total: totalClasses,\n          completed: completedClasses,\n          upcoming: upcomingClasses,\n          completionRate: totalClasses > 0 ? Math.round(completedClasses / totalClasses * 100) : 0\n        }\n      });\n    } catch (error) {\n      console.error('Erro ao buscar estatísticas:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  });\n  return function (_x9, _x0) {\n    return _ref5.apply(this, arguments);\n  };\n}());\nmodule.exports = router;","map":{"version":3,"names":["express","require","bcrypt","jwt","prisma","router","Router","authenticateToken","req","res","next","authHeader","headers","token","split","status","json","success","message","verify","process","env","JWT_SECRET","err","user","requireTeacher","userType","get","_ref","_asyncToGenerator","_req$query","query","month","year","whereClause","teacherId","userId","startDate","Date","endDate","date","gte","lte","classes","teacherClass","findMany","where","orderBy","classesByDate","forEach","cls","dateStr","toISOString","id","school","grade","subject","isCompleted","notes","data","error","console","_x","_x2","apply","arguments","post","_ref2","_req$body","body","classDate","existingClass","findFirst","classData","update","create","_x3","_x4","delete","_ref3","params","_x5","_x6","put","_ref4","updatedClass","Boolean","_x7","_x8","_ref5","_req$query2","totalClasses","count","completedClasses","_objectSpread","upcomingClasses","total","completed","upcoming","completionRate","Math","round","_x9","_x0","module","exports"],"sources":["C:/Users/lukag/OneDrive/Área de Trabalho/Muvz_App/api/routes/classes.js"],"sourcesContent":["const express = require('express');\r\nconst bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\nconst prisma = require('../prisma');\r\n\r\nconst router = express.Router();\r\n\r\n// Middleware para verificar token JWT\r\nconst authenticateToken = (req, res, next) => {\r\n  const authHeader = req.headers['authorization'];\r\n  const token = authHeader && authHeader.split(' ')[1];\r\n\r\n  if (!token) {\r\n    return res.status(401).json({\r\n      success: false,\r\n      message: 'Token de acesso necessário'\r\n    });\r\n  }\r\n\r\n  jwt.verify(token, process.env.JWT_SECRET || 'fallback-secret', (err, user) => {\r\n    if (err) {\r\n      return res.status(403).json({\r\n        success: false,\r\n        message: 'Token inválido ou expirado'\r\n      });\r\n    }\r\n    req.user = user;\r\n    next();\r\n  });\r\n};\r\n\r\n// Middleware para verificar se é professor\r\nconst requireTeacher = (req, res, next) => {\r\n  if (req.user.userType !== 'TEACHER') {\r\n    return res.status(403).json({\r\n      success: false,\r\n      message: 'Acesso negado. Apenas professores podem acessar esta funcionalidade.'\r\n    });\r\n  }\r\n  next();\r\n};\r\n\r\n// Obter aulas do professor\r\nrouter.get('/', authenticateToken, requireTeacher, async (req, res) => {\r\n  try {\r\n    const { month, year } = req.query;\r\n    \r\n    let whereClause = {\r\n      teacherId: req.user.userId\r\n    };\r\n\r\n    if (month && year) {\r\n      const startDate = new Date(year, month - 1, 1);\r\n      const endDate = new Date(year, month, 0);\r\n      whereClause.date = {\r\n        gte: startDate,\r\n        lte: endDate\r\n      };\r\n    }\r\n\r\n    const classes = await prisma.teacherClass.findMany({\r\n      where: whereClause,\r\n      orderBy: { date: 'asc' }\r\n    });\r\n\r\n    // Converter para formato de objeto com data como chave\r\n    const classesByDate = {};\r\n    classes.forEach(cls => {\r\n      const dateStr = cls.date.toISOString().split('T')[0];\r\n      classesByDate[dateStr] = {\r\n        id: cls.id,\r\n        school: cls.school,\r\n        grade: cls.grade,\r\n        subject: cls.subject,\r\n        isCompleted: cls.isCompleted,\r\n        notes: cls.notes\r\n      };\r\n    });\r\n\r\n    res.json({\r\n      success: true,\r\n      data: classesByDate\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Erro ao buscar aulas:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Erro interno do servidor'\r\n    });\r\n  }\r\n});\r\n\r\n// Criar ou atualizar aula\r\nrouter.post('/', authenticateToken, requireTeacher, async (req, res) => {\r\n  try {\r\n    const { date, school, grade, subject, notes } = req.body;\r\n\r\n    if (!date || !school || !grade) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: 'Data, escola e série são obrigatórios'\r\n      });\r\n    }\r\n\r\n    const classDate = new Date(date);\r\n    \r\n    // Verificar se já existe uma aula nesta data\r\n    const existingClass = await prisma.teacherClass.findFirst({\r\n      where: {\r\n        teacherId: req.user.userId,\r\n        date: classDate\r\n      }\r\n    });\r\n\r\n    let classData;\r\n    if (existingClass) {\r\n      // Atualizar aula existente\r\n      classData = await prisma.teacherClass.update({\r\n        where: { id: existingClass.id },\r\n        data: {\r\n          school,\r\n          grade,\r\n          subject: subject || null,\r\n          notes: notes || null\r\n        }\r\n      });\r\n    } else {\r\n      // Criar nova aula\r\n      classData = await prisma.teacherClass.create({\r\n        data: {\r\n          teacherId: req.user.userId,\r\n          date: classDate,\r\n          school,\r\n          grade,\r\n          subject: subject || null,\r\n          notes: notes || null\r\n        }\r\n      });\r\n    }\r\n\r\n    res.status(201).json({\r\n      success: true,\r\n      message: existingClass ? 'Aula atualizada com sucesso' : 'Aula criada com sucesso',\r\n      data: classData\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Erro ao criar/atualizar aula:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Erro interno do servidor'\r\n    });\r\n  }\r\n});\r\n\r\n// Remover aula\r\nrouter.delete('/:id', authenticateToken, requireTeacher, async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n\r\n    // Verificar se a aula pertence ao professor\r\n    const existingClass = await prisma.teacherClass.findFirst({\r\n      where: {\r\n        id,\r\n        teacherId: req.user.userId\r\n      }\r\n    });\r\n\r\n    if (!existingClass) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'Aula não encontrada'\r\n      });\r\n    }\r\n\r\n    await prisma.teacherClass.delete({\r\n      where: { id }\r\n    });\r\n\r\n    res.json({\r\n      success: true,\r\n      message: 'Aula removida com sucesso'\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Erro ao remover aula:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Erro interno do servidor'\r\n    });\r\n  }\r\n});\r\n\r\n// Marcar aula como concluída\r\nrouter.put('/:id/complete', authenticateToken, requireTeacher, async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const { isCompleted } = req.body;\r\n\r\n    // Verificar se a aula pertence ao professor\r\n    const existingClass = await prisma.teacherClass.findFirst({\r\n      where: {\r\n        id,\r\n        teacherId: req.user.userId\r\n      }\r\n    });\r\n\r\n    if (!existingClass) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'Aula não encontrada'\r\n      });\r\n    }\r\n\r\n    const updatedClass = await prisma.teacherClass.update({\r\n      where: { id },\r\n      data: { isCompleted: Boolean(isCompleted) }\r\n    });\r\n\r\n    res.json({\r\n      success: true,\r\n      message: isCompleted ? 'Aula marcada como concluída' : 'Aula marcada como não concluída',\r\n      data: updatedClass\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Erro ao atualizar status da aula:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Erro interno do servidor'\r\n    });\r\n  }\r\n});\r\n\r\n// Obter estatísticas das aulas\r\nrouter.get('/stats', authenticateToken, requireTeacher, async (req, res) => {\r\n  try {\r\n    const { month, year } = req.query;\r\n    \r\n    let whereClause = {\r\n      teacherId: req.user.userId\r\n    };\r\n\r\n    if (month && year) {\r\n      const startDate = new Date(year, month - 1, 1);\r\n      const endDate = new Date(year, month, 0);\r\n      whereClause.date = {\r\n        gte: startDate,\r\n        lte: endDate\r\n      };\r\n    }\r\n\r\n    const totalClasses = await prisma.teacherClass.count({\r\n      where: whereClause\r\n    });\r\n\r\n    const completedClasses = await prisma.teacherClass.count({\r\n      where: {\r\n        ...whereClause,\r\n        isCompleted: true\r\n      }\r\n    });\r\n\r\n    const upcomingClasses = await prisma.teacherClass.count({\r\n      where: {\r\n        ...whereClause,\r\n        isCompleted: false,\r\n        date: {\r\n          gte: new Date()\r\n        }\r\n      }\r\n    });\r\n\r\n    res.json({\r\n      success: true,\r\n      data: {\r\n        total: totalClasses,\r\n        completed: completedClasses,\r\n        upcoming: upcomingClasses,\r\n        completionRate: totalClasses > 0 ? Math.round((completedClasses / totalClasses) * 100) : 0\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Erro ao buscar estatísticas:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Erro interno do servidor'\r\n    });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"],"mappings":";;;;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,IAAMC,MAAM,GAAGD,OAAO,CAAC,UAAU,CAAC;AAClC,IAAME,GAAG,GAAGF,OAAO,CAAC,cAAc,CAAC;AACnC,IAAMG,MAAM,GAAGH,OAAO,YAAY,CAAC;AAEnC,IAAMI,MAAM,GAAGL,OAAO,CAACM,MAAM,CAAC,CAAC;AAG/B,IAAMC,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAIC,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAK;EAC5C,IAAMC,UAAU,GAAGH,GAAG,CAACI,OAAO,CAAC,eAAe,CAAC;EAC/C,IAAMC,KAAK,GAAGF,UAAU,IAAIA,UAAU,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAEpD,IAAI,CAACD,KAAK,EAAE;IACV,OAAOJ,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BC,OAAO,EAAE,KAAK;MACdC,OAAO,EAAE;IACX,CAAC,CAAC;EACJ;EAEAf,GAAG,CAACgB,MAAM,CAACN,KAAK,EAAEO,OAAO,CAACC,GAAG,CAACC,UAAU,IAAI,iBAAiB,EAAE,UAACC,GAAG,EAAEC,IAAI,EAAK;IAC5E,IAAID,GAAG,EAAE;MACP,OAAOd,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ;IACAV,GAAG,CAACgB,IAAI,GAAGA,IAAI;IACfd,IAAI,CAAC,CAAC;EACR,CAAC,CAAC;AACJ,CAAC;AAGD,IAAMe,cAAc,GAAG,SAAjBA,cAAcA,CAAIjB,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAK;EACzC,IAAIF,GAAG,CAACgB,IAAI,CAACE,QAAQ,KAAK,SAAS,EAAE;IACnC,OAAOjB,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BC,OAAO,EAAE,KAAK;MACdC,OAAO,EAAE;IACX,CAAC,CAAC;EACJ;EACAR,IAAI,CAAC,CAAC;AACR,CAAC;AAGDL,MAAM,CAACsB,GAAG,CAAC,GAAG,EAAEpB,iBAAiB,EAAEkB,cAAc;EAAA,IAAAG,IAAA,GAAAC,iBAAA,CAAE,WAAOrB,GAAG,EAAEC,GAAG,EAAK;IACrE,IAAI;MACF,IAAAqB,UAAA,GAAwBtB,GAAG,CAACuB,KAAK;QAAzBC,KAAK,GAAAF,UAAA,CAALE,KAAK;QAAEC,IAAI,GAAAH,UAAA,CAAJG,IAAI;MAEnB,IAAIC,WAAW,GAAG;QAChBC,SAAS,EAAE3B,GAAG,CAACgB,IAAI,CAACY;MACtB,CAAC;MAED,IAAIJ,KAAK,IAAIC,IAAI,EAAE;QACjB,IAAMI,SAAS,GAAG,IAAIC,IAAI,CAACL,IAAI,EAAED,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC;QAC9C,IAAMO,OAAO,GAAG,IAAID,IAAI,CAACL,IAAI,EAAED,KAAK,EAAE,CAAC,CAAC;QACxCE,WAAW,CAACM,IAAI,GAAG;UACjBC,GAAG,EAAEJ,SAAS;UACdK,GAAG,EAAEH;QACP,CAAC;MACH;MAEA,IAAMI,OAAO,SAASvC,MAAM,CAACwC,YAAY,CAACC,QAAQ,CAAC;QACjDC,KAAK,EAAEZ,WAAW;QAClBa,OAAO,EAAE;UAAEP,IAAI,EAAE;QAAM;MACzB,CAAC,CAAC;MAGF,IAAMQ,aAAa,GAAG,CAAC,CAAC;MACxBL,OAAO,CAACM,OAAO,CAAC,UAAAC,GAAG,EAAI;QACrB,IAAMC,OAAO,GAAGD,GAAG,CAACV,IAAI,CAACY,WAAW,CAAC,CAAC,CAACtC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACpDkC,aAAa,CAACG,OAAO,CAAC,GAAG;UACvBE,EAAE,EAAEH,GAAG,CAACG,EAAE;UACVC,MAAM,EAAEJ,GAAG,CAACI,MAAM;UAClBC,KAAK,EAAEL,GAAG,CAACK,KAAK;UAChBC,OAAO,EAAEN,GAAG,CAACM,OAAO;UACpBC,WAAW,EAAEP,GAAG,CAACO,WAAW;UAC5BC,KAAK,EAAER,GAAG,CAACQ;QACb,CAAC;MACH,CAAC,CAAC;MAEFjD,GAAG,CAACO,IAAI,CAAC;QACPC,OAAO,EAAE,IAAI;QACb0C,IAAI,EAAEX;MACR,CAAC,CAAC;IAEJ,CAAC,CAAC,OAAOY,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CnD,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QACnBC,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ;EACF,CAAC;EAAA,iBAAA4C,EAAA,EAAAC,GAAA;IAAA,OAAAnC,IAAA,CAAAoC,KAAA,OAAAC,SAAA;EAAA;AAAA,IAAC;AAGF5D,MAAM,CAAC6D,IAAI,CAAC,GAAG,EAAE3D,iBAAiB,EAAEkB,cAAc;EAAA,IAAA0C,KAAA,GAAAtC,iBAAA,CAAE,WAAOrB,GAAG,EAAEC,GAAG,EAAK;IACtE,IAAI;MACF,IAAA2D,SAAA,GAAgD5D,GAAG,CAAC6D,IAAI;QAAhD7B,IAAI,GAAA4B,SAAA,CAAJ5B,IAAI;QAAEc,MAAM,GAAAc,SAAA,CAANd,MAAM;QAAEC,KAAK,GAAAa,SAAA,CAALb,KAAK;QAAEC,OAAO,GAAAY,SAAA,CAAPZ,OAAO;QAAEE,KAAK,GAAAU,SAAA,CAALV,KAAK;MAE3C,IAAI,CAAClB,IAAI,IAAI,CAACc,MAAM,IAAI,CAACC,KAAK,EAAE;QAC9B,OAAO9C,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UAC1BC,OAAO,EAAE,KAAK;UACdC,OAAO,EAAE;QACX,CAAC,CAAC;MACJ;MAEA,IAAMoD,SAAS,GAAG,IAAIhC,IAAI,CAACE,IAAI,CAAC;MAGhC,IAAM+B,aAAa,SAASnE,MAAM,CAACwC,YAAY,CAAC4B,SAAS,CAAC;QACxD1B,KAAK,EAAE;UACLX,SAAS,EAAE3B,GAAG,CAACgB,IAAI,CAACY,MAAM;UAC1BI,IAAI,EAAE8B;QACR;MACF,CAAC,CAAC;MAEF,IAAIG,SAAS;MACb,IAAIF,aAAa,EAAE;QAEjBE,SAAS,SAASrE,MAAM,CAACwC,YAAY,CAAC8B,MAAM,CAAC;UAC3C5B,KAAK,EAAE;YAAEO,EAAE,EAAEkB,aAAa,CAAClB;UAAG,CAAC;UAC/BM,IAAI,EAAE;YACJL,MAAM,EAANA,MAAM;YACNC,KAAK,EAALA,KAAK;YACLC,OAAO,EAAEA,OAAO,IAAI,IAAI;YACxBE,KAAK,EAAEA,KAAK,IAAI;UAClB;QACF,CAAC,CAAC;MACJ,CAAC,MAAM;QAELe,SAAS,SAASrE,MAAM,CAACwC,YAAY,CAAC+B,MAAM,CAAC;UAC3ChB,IAAI,EAAE;YACJxB,SAAS,EAAE3B,GAAG,CAACgB,IAAI,CAACY,MAAM;YAC1BI,IAAI,EAAE8B,SAAS;YACfhB,MAAM,EAANA,MAAM;YACNC,KAAK,EAALA,KAAK;YACLC,OAAO,EAAEA,OAAO,IAAI,IAAI;YACxBE,KAAK,EAAEA,KAAK,IAAI;UAClB;QACF,CAAC,CAAC;MACJ;MAEAjD,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QACnBC,OAAO,EAAE,IAAI;QACbC,OAAO,EAAEqD,aAAa,GAAG,6BAA6B,GAAG,yBAAyB;QAClFZ,IAAI,EAAEc;MACR,CAAC,CAAC;IAEJ,CAAC,CAAC,OAAOb,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrDnD,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QACnBC,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ;EACF,CAAC;EAAA,iBAAA0D,GAAA,EAAAC,GAAA;IAAA,OAAAV,KAAA,CAAAH,KAAA,OAAAC,SAAA;EAAA;AAAA,IAAC;AAGF5D,MAAM,CAACyE,MAAM,CAAC,MAAM,EAAEvE,iBAAiB,EAAEkB,cAAc;EAAA,IAAAsD,KAAA,GAAAlD,iBAAA,CAAE,WAAOrB,GAAG,EAAEC,GAAG,EAAK;IAC3E,IAAI;MACF,IAAQ4C,EAAE,GAAK7C,GAAG,CAACwE,MAAM,CAAjB3B,EAAE;MAGV,IAAMkB,aAAa,SAASnE,MAAM,CAACwC,YAAY,CAAC4B,SAAS,CAAC;QACxD1B,KAAK,EAAE;UACLO,EAAE,EAAFA,EAAE;UACFlB,SAAS,EAAE3B,GAAG,CAACgB,IAAI,CAACY;QACtB;MACF,CAAC,CAAC;MAEF,IAAI,CAACmC,aAAa,EAAE;QAClB,OAAO9D,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UAC1BC,OAAO,EAAE,KAAK;UACdC,OAAO,EAAE;QACX,CAAC,CAAC;MACJ;MAEA,MAAMd,MAAM,CAACwC,YAAY,CAACkC,MAAM,CAAC;QAC/BhC,KAAK,EAAE;UAAEO,EAAE,EAAFA;QAAG;MACd,CAAC,CAAC;MAEF5C,GAAG,CAACO,IAAI,CAAC;QACPC,OAAO,EAAE,IAAI;QACbC,OAAO,EAAE;MACX,CAAC,CAAC;IAEJ,CAAC,CAAC,OAAO0C,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CnD,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QACnBC,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ;EACF,CAAC;EAAA,iBAAA+D,GAAA,EAAAC,GAAA;IAAA,OAAAH,KAAA,CAAAf,KAAA,OAAAC,SAAA;EAAA;AAAA,IAAC;AAGF5D,MAAM,CAAC8E,GAAG,CAAC,eAAe,EAAE5E,iBAAiB,EAAEkB,cAAc;EAAA,IAAA2D,KAAA,GAAAvD,iBAAA,CAAE,WAAOrB,GAAG,EAAEC,GAAG,EAAK;IACjF,IAAI;MACF,IAAQ4C,EAAE,GAAK7C,GAAG,CAACwE,MAAM,CAAjB3B,EAAE;MACV,IAAQI,WAAW,GAAKjD,GAAG,CAAC6D,IAAI,CAAxBZ,WAAW;MAGnB,IAAMc,aAAa,SAASnE,MAAM,CAACwC,YAAY,CAAC4B,SAAS,CAAC;QACxD1B,KAAK,EAAE;UACLO,EAAE,EAAFA,EAAE;UACFlB,SAAS,EAAE3B,GAAG,CAACgB,IAAI,CAACY;QACtB;MACF,CAAC,CAAC;MAEF,IAAI,CAACmC,aAAa,EAAE;QAClB,OAAO9D,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UAC1BC,OAAO,EAAE,KAAK;UACdC,OAAO,EAAE;QACX,CAAC,CAAC;MACJ;MAEA,IAAMmE,YAAY,SAASjF,MAAM,CAACwC,YAAY,CAAC8B,MAAM,CAAC;QACpD5B,KAAK,EAAE;UAAEO,EAAE,EAAFA;QAAG,CAAC;QACbM,IAAI,EAAE;UAAEF,WAAW,EAAE6B,OAAO,CAAC7B,WAAW;QAAE;MAC5C,CAAC,CAAC;MAEFhD,GAAG,CAACO,IAAI,CAAC;QACPC,OAAO,EAAE,IAAI;QACbC,OAAO,EAAEuC,WAAW,GAAG,6BAA6B,GAAG,iCAAiC;QACxFE,IAAI,EAAE0B;MACR,CAAC,CAAC;IAEJ,CAAC,CAAC,OAAOzB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzDnD,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QACnBC,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ;EACF,CAAC;EAAA,iBAAAqE,GAAA,EAAAC,GAAA;IAAA,OAAAJ,KAAA,CAAApB,KAAA,OAAAC,SAAA;EAAA;AAAA,IAAC;AAGF5D,MAAM,CAACsB,GAAG,CAAC,QAAQ,EAAEpB,iBAAiB,EAAEkB,cAAc;EAAA,IAAAgE,KAAA,GAAA5D,iBAAA,CAAE,WAAOrB,GAAG,EAAEC,GAAG,EAAK;IAC1E,IAAI;MACF,IAAAiF,WAAA,GAAwBlF,GAAG,CAACuB,KAAK;QAAzBC,KAAK,GAAA0D,WAAA,CAAL1D,KAAK;QAAEC,IAAI,GAAAyD,WAAA,CAAJzD,IAAI;MAEnB,IAAIC,WAAW,GAAG;QAChBC,SAAS,EAAE3B,GAAG,CAACgB,IAAI,CAACY;MACtB,CAAC;MAED,IAAIJ,KAAK,IAAIC,IAAI,EAAE;QACjB,IAAMI,SAAS,GAAG,IAAIC,IAAI,CAACL,IAAI,EAAED,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC;QAC9C,IAAMO,OAAO,GAAG,IAAID,IAAI,CAACL,IAAI,EAAED,KAAK,EAAE,CAAC,CAAC;QACxCE,WAAW,CAACM,IAAI,GAAG;UACjBC,GAAG,EAAEJ,SAAS;UACdK,GAAG,EAAEH;QACP,CAAC;MACH;MAEA,IAAMoD,YAAY,SAASvF,MAAM,CAACwC,YAAY,CAACgD,KAAK,CAAC;QACnD9C,KAAK,EAAEZ;MACT,CAAC,CAAC;MAEF,IAAM2D,gBAAgB,SAASzF,MAAM,CAACwC,YAAY,CAACgD,KAAK,CAAC;QACvD9C,KAAK,EAAAgD,aAAA,CAAAA,aAAA,KACA5D,WAAW;UACduB,WAAW,EAAE;QAAI;MAErB,CAAC,CAAC;MAEF,IAAMsC,eAAe,SAAS3F,MAAM,CAACwC,YAAY,CAACgD,KAAK,CAAC;QACtD9C,KAAK,EAAAgD,aAAA,CAAAA,aAAA,KACA5D,WAAW;UACduB,WAAW,EAAE,KAAK;UAClBjB,IAAI,EAAE;YACJC,GAAG,EAAE,IAAIH,IAAI,CAAC;UAChB;QAAC;MAEL,CAAC,CAAC;MAEF7B,GAAG,CAACO,IAAI,CAAC;QACPC,OAAO,EAAE,IAAI;QACb0C,IAAI,EAAE;UACJqC,KAAK,EAAEL,YAAY;UACnBM,SAAS,EAAEJ,gBAAgB;UAC3BK,QAAQ,EAAEH,eAAe;UACzBI,cAAc,EAAER,YAAY,GAAG,CAAC,GAAGS,IAAI,CAACC,KAAK,CAAER,gBAAgB,GAAGF,YAAY,GAAI,GAAG,CAAC,GAAG;QAC3F;MACF,CAAC,CAAC;IAEJ,CAAC,CAAC,OAAO/B,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpDnD,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QACnBC,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ;EACF,CAAC;EAAA,iBAAAoF,GAAA,EAAAC,GAAA;IAAA,OAAAd,KAAA,CAAAzB,KAAA,OAAAC,SAAA;EAAA;AAAA,IAAC;AAEFuC,MAAM,CAACC,OAAO,GAAGpG,MAAM","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}