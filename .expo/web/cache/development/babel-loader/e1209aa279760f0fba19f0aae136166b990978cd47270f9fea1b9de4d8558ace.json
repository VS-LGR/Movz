{"ast":null,"code":"var _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nvar express = require('express');\nvar prisma = require(\"../prisma\");\nvar authenticateToken = function authenticateToken(req, res, next) {\n  var authHeader = req.headers['authorization'];\n  var token = authHeader && authHeader.split(' ')[1];\n  if (!token) {\n    return res.status(401).json({\n      success: false,\n      message: 'Token de acesso necessário'\n    });\n  }\n  var jwt = require('jsonwebtoken');\n  jwt.verify(token, process.env.JWT_SECRET || 'fallback-secret', function (err, user) {\n    if (err) {\n      return res.status(403).json({\n        success: false,\n        message: 'Token inválido ou expirado'\n      });\n    }\n    req.user = user;\n    next();\n  });\n};\nvar router = express.Router();\nrouter.get('/sport/:sportId', function () {\n  var _ref = _asyncToGenerator(function* (req, res) {\n    try {\n      var sportId = req.params.sportId;\n      var _req$query = req.query,\n        type = _req$query.type,\n        difficulty = _req$query.difficulty,\n        _req$query$limit = _req$query.limit,\n        limit = _req$query$limit === void 0 ? 20 : _req$query$limit,\n        _req$query$offset = _req$query.offset,\n        offset = _req$query$offset === void 0 ? 0 : _req$query$offset;\n      var whereClause = {\n        sportId: sportId,\n        isActive: true\n      };\n      if (type) {\n        whereClause.type = type;\n      }\n      if (difficulty) {\n        whereClause.difficulty = difficulty;\n      }\n      var contents = yield prisma.content.findMany({\n        where: whereClause,\n        select: {\n          id: true,\n          title: true,\n          description: true,\n          type: true,\n          difficulty: true,\n          duration: true,\n          instructions: true,\n          videoUrl: true,\n          imageUrl: true,\n          createdAt: true\n        },\n        orderBy: [{\n          type: 'asc'\n        }, {\n          difficulty: 'asc'\n        }, {\n          title: 'asc'\n        }],\n        take: parseInt(limit),\n        skip: parseInt(offset)\n      });\n      var totalCount = yield prisma.content.count({\n        where: whereClause\n      });\n      res.json({\n        success: true,\n        data: {\n          contents: contents,\n          pagination: {\n            total: totalCount,\n            limit: parseInt(limit),\n            offset: parseInt(offset),\n            hasMore: parseInt(offset) + parseInt(limit) < totalCount\n          }\n        }\n      });\n    } catch (error) {\n      console.error('Erro ao buscar conteúdos:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  });\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}());\nrouter.get('/:id', function () {\n  var _ref2 = _asyncToGenerator(function* (req, res) {\n    try {\n      var id = req.params.id;\n      var content = yield prisma.content.findUnique({\n        where: {\n          id: id\n        },\n        include: {\n          sport: {\n            select: {\n              id: true,\n              name: true,\n              icon: true,\n              color: true\n            }\n          }\n        }\n      });\n      if (!content) {\n        return res.status(404).json({\n          success: false,\n          message: 'Conteúdo não encontrado'\n        });\n      }\n      res.json({\n        success: true,\n        data: {\n          content: content\n        }\n      });\n    } catch (error) {\n      console.error('Erro ao buscar conteúdo:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  });\n  return function (_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nrouter.get('/type/:type', function () {\n  var _ref3 = _asyncToGenerator(function* (req, res) {\n    try {\n      var type = req.params.type;\n      var _req$query2 = req.query,\n        sportId = _req$query2.sportId,\n        difficulty = _req$query2.difficulty,\n        _req$query2$limit = _req$query2.limit,\n        limit = _req$query2$limit === void 0 ? 20 : _req$query2$limit,\n        _req$query2$offset = _req$query2.offset,\n        offset = _req$query2$offset === void 0 ? 0 : _req$query2$offset;\n      var whereClause = {\n        type: type.toUpperCase(),\n        isActive: true\n      };\n      if (sportId) {\n        whereClause.sportId = sportId;\n      }\n      if (difficulty) {\n        whereClause.difficulty = difficulty.toUpperCase();\n      }\n      var contents = yield prisma.content.findMany({\n        where: whereClause,\n        include: {\n          sport: {\n            select: {\n              id: true,\n              name: true,\n              icon: true,\n              color: true\n            }\n          }\n        },\n        orderBy: [{\n          difficulty: 'asc'\n        }, {\n          title: 'asc'\n        }],\n        take: parseInt(limit),\n        skip: parseInt(offset)\n      });\n      var totalCount = yield prisma.content.count({\n        where: whereClause\n      });\n      res.json({\n        success: true,\n        data: {\n          contents: contents,\n          pagination: {\n            total: totalCount,\n            limit: parseInt(limit),\n            offset: parseInt(offset),\n            hasMore: parseInt(offset) + parseInt(limit) < totalCount\n          }\n        }\n      });\n    } catch (error) {\n      console.error('Erro ao buscar conteúdos por tipo:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  });\n  return function (_x5, _x6) {\n    return _ref3.apply(this, arguments);\n  };\n}());\nrouter.get('/:id/progress', authenticateToken, function () {\n  var _ref4 = _asyncToGenerator(function* (req, res) {\n    try {\n      var contentId = req.params.id;\n      var userId = req.user.userId;\n      var progress = yield prisma.userProgress.findFirst({\n        where: {\n          userId: userId,\n          contentId: contentId\n        },\n        include: {\n          content: {\n            select: {\n              id: true,\n              title: true,\n              type: true,\n              difficulty: true\n            }\n          }\n        }\n      });\n      res.json({\n        success: true,\n        data: {\n          progress: progress || {\n            progress: 0,\n            completedAt: null,\n            content: null\n          }\n        }\n      });\n    } catch (error) {\n      console.error('Erro ao buscar progresso:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  });\n  return function (_x7, _x8) {\n    return _ref4.apply(this, arguments);\n  };\n}());\nrouter.put('/:id/progress', authenticateToken, function () {\n  var _ref5 = _asyncToGenerator(function* (req, res) {\n    try {\n      var contentId = req.params.id;\n      var progressValue = req.body.progress;\n      var userId = req.user.userId;\n      if (progressValue < 0 || progressValue > 100) {\n        return res.status(400).json({\n          success: false,\n          message: 'Progresso deve estar entre 0 e 100'\n        });\n      }\n      var content = yield prisma.content.findUnique({\n        where: {\n          id: contentId\n        }\n      });\n      if (!content) {\n        return res.status(404).json({\n          success: false,\n          message: 'Conteúdo não encontrado'\n        });\n      }\n      var updateData = {\n        progress: progressValue,\n        completedAt: progressValue === 100 ? new Date() : null\n      };\n      var userProgress = yield prisma.userProgress.upsert({\n        where: {\n          userId_contentId: {\n            userId: userId,\n            contentId: contentId\n          }\n        },\n        update: updateData,\n        create: _objectSpread({\n          userId: userId,\n          contentId: contentId,\n          sportId: content.sportId\n        }, updateData),\n        include: {\n          content: {\n            select: {\n              id: true,\n              title: true,\n              type: true,\n              difficulty: true\n            }\n          }\n        }\n      });\n      res.json({\n        success: true,\n        message: progressValue === 100 ? 'Conteúdo concluído!' : 'Progresso atualizado',\n        data: {\n          userProgress: userProgress\n        }\n      });\n    } catch (error) {\n      console.error('Erro ao atualizar progresso:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  });\n  return function (_x9, _x0) {\n    return _ref5.apply(this, arguments);\n  };\n}());\nrouter.get('/user/completed', authenticateToken, function () {\n  var _ref6 = _asyncToGenerator(function* (req, res) {\n    try {\n      var userId = req.user.userId;\n      var _req$query3 = req.query,\n        _req$query3$limit = _req$query3.limit,\n        limit = _req$query3$limit === void 0 ? 20 : _req$query3$limit,\n        _req$query3$offset = _req$query3.offset,\n        offset = _req$query3$offset === void 0 ? 0 : _req$query3$offset;\n      var completedContents = yield prisma.userProgress.findMany({\n        where: {\n          userId: userId,\n          progress: 100\n        },\n        include: {\n          content: {\n            select: {\n              id: true,\n              title: true,\n              description: true,\n              type: true,\n              difficulty: true,\n              duration: true,\n              imageUrl: true\n            }\n          }\n        },\n        orderBy: {\n          completedAt: 'desc'\n        },\n        take: parseInt(limit),\n        skip: parseInt(offset)\n      });\n      var totalCount = yield prisma.userProgress.count({\n        where: {\n          userId: userId,\n          progress: 100\n        }\n      });\n      res.json({\n        success: true,\n        data: {\n          completedContents: completedContents,\n          pagination: {\n            total: totalCount,\n            limit: parseInt(limit),\n            offset: parseInt(offset),\n            hasMore: parseInt(offset) + parseInt(limit) < totalCount\n          }\n        }\n      });\n    } catch (error) {\n      console.error('Erro ao buscar conteúdos concluídos:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  });\n  return function (_x1, _x10) {\n    return _ref6.apply(this, arguments);\n  };\n}());\nmodule.exports = router;","map":{"version":3,"names":["express","require","prisma","authenticateToken","req","res","next","authHeader","headers","token","split","status","json","success","message","jwt","verify","process","env","JWT_SECRET","err","user","router","Router","get","_ref","_asyncToGenerator","sportId","params","_req$query","query","type","difficulty","_req$query$limit","limit","_req$query$offset","offset","whereClause","isActive","contents","content","findMany","where","select","id","title","description","duration","instructions","videoUrl","imageUrl","createdAt","orderBy","take","parseInt","skip","totalCount","count","data","pagination","total","hasMore","error","console","_x","_x2","apply","arguments","_ref2","findUnique","include","sport","name","icon","color","_x3","_x4","_ref3","_req$query2","_req$query2$limit","_req$query2$offset","toUpperCase","_x5","_x6","_ref4","contentId","userId","progress","userProgress","findFirst","completedAt","_x7","_x8","put","_ref5","progressValue","body","updateData","Date","upsert","userId_contentId","update","create","_objectSpread","_x9","_x0","_ref6","_req$query3","_req$query3$limit","_req$query3$offset","completedContents","_x1","_x10","module","exports"],"sources":["C:/Users/lukag/OneDrive/Área de Trabalho/Muvz_App/api/routes/contents.js"],"sourcesContent":["const express = require('express');\r\nconst prisma = require('../prisma');\r\n// Middleware de autenticação\r\nconst authenticateToken = (req, res, next) => {\r\n  const authHeader = req.headers['authorization'];\r\n  const token = authHeader && authHeader.split(' ')[1];\r\n\r\n  if (!token) {\r\n    return res.status(401).json({\r\n      success: false,\r\n      message: 'Token de acesso necessário'\r\n    });\r\n  }\r\n\r\n  const jwt = require('jsonwebtoken');\r\n  jwt.verify(token, process.env.JWT_SECRET || 'fallback-secret', (err, user) => {\r\n    if (err) {\r\n      return res.status(403).json({\r\n        success: false,\r\n        message: 'Token inválido ou expirado'\r\n      });\r\n    }\r\n    req.user = user;\r\n    next();\r\n  });\r\n};\r\n\r\nconst router = express.Router();\r\n\r\n// Buscar conteúdos por esporte\r\nrouter.get('/sport/:sportId', async (req, res) => {\r\n  try {\r\n    const { sportId } = req.params;\r\n    const { type, difficulty, limit = 20, offset = 0 } = req.query;\r\n\r\n    const whereClause = {\r\n      sportId,\r\n      isActive: true\r\n    };\r\n\r\n    if (type) {\r\n      whereClause.type = type;\r\n    }\r\n\r\n    if (difficulty) {\r\n      whereClause.difficulty = difficulty;\r\n    }\r\n\r\n    const contents = await prisma.content.findMany({\r\n      where: whereClause,\r\n      select: {\r\n        id: true,\r\n        title: true,\r\n        description: true,\r\n        type: true,\r\n        difficulty: true,\r\n        duration: true,\r\n        instructions: true,\r\n        videoUrl: true,\r\n        imageUrl: true,\r\n        createdAt: true\r\n      },\r\n      orderBy: [\r\n        { type: 'asc' },\r\n        { difficulty: 'asc' },\r\n        { title: 'asc' }\r\n      ],\r\n      take: parseInt(limit),\r\n      skip: parseInt(offset)\r\n    });\r\n\r\n    const totalCount = await prisma.content.count({\r\n      where: whereClause\r\n    });\r\n\r\n    res.json({\r\n      success: true,\r\n      data: {\r\n        contents,\r\n        pagination: {\r\n          total: totalCount,\r\n          limit: parseInt(limit),\r\n          offset: parseInt(offset),\r\n          hasMore: (parseInt(offset) + parseInt(limit)) < totalCount\r\n        }\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Erro ao buscar conteúdos:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Erro interno do servidor'\r\n    });\r\n  }\r\n});\r\n\r\n// Buscar conteúdo por ID\r\nrouter.get('/:id', async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n\r\n    const content = await prisma.content.findUnique({\r\n      where: { id },\r\n      include: {\r\n        sport: {\r\n          select: {\r\n            id: true,\r\n            name: true,\r\n            icon: true,\r\n            color: true\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    if (!content) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'Conteúdo não encontrado'\r\n      });\r\n    }\r\n\r\n    res.json({\r\n      success: true,\r\n      data: { content }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Erro ao buscar conteúdo:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Erro interno do servidor'\r\n    });\r\n  }\r\n});\r\n\r\n// Buscar conteúdos por tipo (aquecimento, treino, desaquecimento)\r\nrouter.get('/type/:type', async (req, res) => {\r\n  try {\r\n    const { type } = req.params;\r\n    const { sportId, difficulty, limit = 20, offset = 0 } = req.query;\r\n\r\n    const whereClause = {\r\n      type: type.toUpperCase(),\r\n      isActive: true\r\n    };\r\n\r\n    if (sportId) {\r\n      whereClause.sportId = sportId;\r\n    }\r\n\r\n    if (difficulty) {\r\n      whereClause.difficulty = difficulty.toUpperCase();\r\n    }\r\n\r\n    const contents = await prisma.content.findMany({\r\n      where: whereClause,\r\n      include: {\r\n        sport: {\r\n          select: {\r\n            id: true,\r\n            name: true,\r\n            icon: true,\r\n            color: true\r\n          }\r\n        }\r\n      },\r\n      orderBy: [\r\n        { difficulty: 'asc' },\r\n        { title: 'asc' }\r\n      ],\r\n      take: parseInt(limit),\r\n      skip: parseInt(offset)\r\n    });\r\n\r\n    const totalCount = await prisma.content.count({\r\n      where: whereClause\r\n    });\r\n\r\n    res.json({\r\n      success: true,\r\n      data: {\r\n        contents,\r\n        pagination: {\r\n          total: totalCount,\r\n          limit: parseInt(limit),\r\n          offset: parseInt(offset),\r\n          hasMore: (parseInt(offset) + parseInt(limit)) < totalCount\r\n        }\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Erro ao buscar conteúdos por tipo:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Erro interno do servidor'\r\n    });\r\n  }\r\n});\r\n\r\n// Buscar progresso do usuário em um conteúdo\r\nrouter.get('/:id/progress', authenticateToken, async (req, res) => {\r\n  try {\r\n    const { id: contentId } = req.params;\r\n    const userId = req.user.userId;\r\n\r\n    const progress = await prisma.userProgress.findFirst({\r\n      where: {\r\n        userId,\r\n        contentId\r\n      },\r\n      include: {\r\n        content: {\r\n          select: {\r\n            id: true,\r\n            title: true,\r\n            type: true,\r\n            difficulty: true\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    res.json({\r\n      success: true,\r\n      data: { \r\n        progress: progress || {\r\n          progress: 0,\r\n          completedAt: null,\r\n          content: null\r\n        }\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Erro ao buscar progresso:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Erro interno do servidor'\r\n    });\r\n  }\r\n});\r\n\r\n// Atualizar progresso do usuário\r\nrouter.put('/:id/progress', authenticateToken, async (req, res) => {\r\n  try {\r\n    const { id: contentId } = req.params;\r\n    const { progress: progressValue } = req.body;\r\n    const userId = req.user.userId;\r\n\r\n    if (progressValue < 0 || progressValue > 100) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: 'Progresso deve estar entre 0 e 100'\r\n      });\r\n    }\r\n\r\n    // Verificar se o conteúdo existe\r\n    const content = await prisma.content.findUnique({\r\n      where: { id: contentId }\r\n    });\r\n\r\n    if (!content) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'Conteúdo não encontrado'\r\n      });\r\n    }\r\n\r\n    const updateData = {\r\n      progress: progressValue,\r\n      completedAt: progressValue === 100 ? new Date() : null\r\n    };\r\n\r\n    const userProgress = await prisma.userProgress.upsert({\r\n      where: {\r\n        userId_contentId: {\r\n          userId,\r\n          contentId\r\n        }\r\n      },\r\n      update: updateData,\r\n      create: {\r\n        userId,\r\n        contentId,\r\n        sportId: content.sportId,\r\n        ...updateData\r\n      },\r\n      include: {\r\n        content: {\r\n          select: {\r\n            id: true,\r\n            title: true,\r\n            type: true,\r\n            difficulty: true\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    res.json({\r\n      success: true,\r\n      message: progressValue === 100 ? 'Conteúdo concluído!' : 'Progresso atualizado',\r\n      data: { userProgress }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Erro ao atualizar progresso:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Erro interno do servidor'\r\n    });\r\n  }\r\n});\r\n\r\n// Buscar conteúdos concluídos pelo usuário\r\nrouter.get('/user/completed', authenticateToken, async (req, res) => {\r\n  try {\r\n    const userId = req.user.userId;\r\n    const { limit = 20, offset = 0 } = req.query;\r\n\r\n    const completedContents = await prisma.userProgress.findMany({\r\n      where: {\r\n        userId,\r\n        progress: 100\r\n      },\r\n      include: {\r\n        content: {\r\n          select: {\r\n            id: true,\r\n            title: true,\r\n            description: true,\r\n            type: true,\r\n            difficulty: true,\r\n            duration: true,\r\n            imageUrl: true\r\n          }\r\n        }\r\n      },\r\n      orderBy: { completedAt: 'desc' },\r\n      take: parseInt(limit),\r\n      skip: parseInt(offset)\r\n    });\r\n\r\n    const totalCount = await prisma.userProgress.count({\r\n      where: {\r\n        userId,\r\n        progress: 100\r\n      }\r\n    });\r\n\r\n    res.json({\r\n      success: true,\r\n      data: {\r\n        completedContents,\r\n        pagination: {\r\n          total: totalCount,\r\n          limit: parseInt(limit),\r\n          offset: parseInt(offset),\r\n          hasMore: (parseInt(offset) + parseInt(limit)) < totalCount\r\n        }\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Erro ao buscar conteúdos concluídos:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Erro interno do servidor'\r\n    });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}