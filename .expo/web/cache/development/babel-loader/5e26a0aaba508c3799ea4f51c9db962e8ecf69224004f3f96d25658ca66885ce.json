{"ast":null,"code":"var _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar express = require('express');\nvar bcrypt = require('bcryptjs');\nvar prisma = require(\"../prisma\");\nvar authenticateToken = function authenticateToken(req, res, next) {\n  var authHeader = req.headers['authorization'];\n  var token = authHeader && authHeader.split(' ')[1];\n  if (!token) {\n    return res.status(401).json({\n      success: false,\n      message: 'Token de acesso necessário'\n    });\n  }\n  var jwt = require('jsonwebtoken');\n  jwt.verify(token, process.env.JWT_SECRET || 'fallback-secret', function (err, user) {\n    if (err) {\n      return res.status(403).json({\n        success: false,\n        message: 'Token inválido ou expirado'\n      });\n    }\n    req.user = user;\n    next();\n  });\n};\nvar router = express.Router();\nrouter.get('/profile', authenticateToken, function () {\n  var _ref = _asyncToGenerator(function* (req, res) {\n    try {\n      var user = yield prisma.user.findUnique({\n        where: {\n          id: req.user.userId\n        },\n        select: {\n          id: true,\n          name: true,\n          email: true,\n          age: true,\n          school: true,\n          class: true,\n          avatar: true,\n          createdAt: true,\n          updatedAt: true,\n          userSports: {\n            include: {\n              sport: {\n                select: {\n                  id: true,\n                  name: true,\n                  icon: true,\n                  color: true\n                }\n              }\n            }\n          }\n        }\n      });\n      if (!user) {\n        return res.status(404).json({\n          success: false,\n          message: 'Usuário não encontrado'\n        });\n      }\n      res.json({\n        success: true,\n        data: {\n          user: user\n        }\n      });\n    } catch (error) {\n      console.error('Erro ao buscar perfil:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  });\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}());\nrouter.put('/profile', authenticateToken, function () {\n  var _ref2 = _asyncToGenerator(function* (req, res) {\n    try {\n      var _req$body = req.body,\n        name = _req$body.name,\n        age = _req$body.age,\n        school = _req$body.school,\n        userClass = _req$body.class,\n        avatar = _req$body.avatar;\n      var updateData = {};\n      if (name) updateData.name = name;\n      if (age !== undefined) updateData.age = parseInt(age);\n      if (school !== undefined) updateData.school = school;\n      if (userClass !== undefined) updateData.class = userClass;\n      if (avatar !== undefined) updateData.avatar = avatar;\n      var user = yield prisma.user.update({\n        where: {\n          id: req.user.userId\n        },\n        data: updateData,\n        select: {\n          id: true,\n          name: true,\n          email: true,\n          age: true,\n          school: true,\n          class: true,\n          avatar: true,\n          updatedAt: true\n        }\n      });\n      res.json({\n        success: true,\n        message: 'Perfil atualizado com sucesso',\n        data: {\n          user: user\n        }\n      });\n    } catch (error) {\n      console.error('Erro ao atualizar perfil:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  });\n  return function (_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nrouter.put('/password', authenticateToken, function () {\n  var _ref3 = _asyncToGenerator(function* (req, res) {\n    try {\n      var _req$body2 = req.body,\n        currentPassword = _req$body2.currentPassword,\n        newPassword = _req$body2.newPassword;\n      if (!currentPassword || !newPassword) {\n        return res.status(400).json({\n          success: false,\n          message: 'Senha atual e nova senha são obrigatórias'\n        });\n      }\n      if (newPassword.length < 6) {\n        return res.status(400).json({\n          success: false,\n          message: 'A nova senha deve ter pelo menos 6 caracteres'\n        });\n      }\n      var user = yield prisma.user.findUnique({\n        where: {\n          id: req.user.userId\n        }\n      });\n      if (!user) {\n        return res.status(404).json({\n          success: false,\n          message: 'Usuário não encontrado'\n        });\n      }\n      var isValidPassword = yield bcrypt.compare(currentPassword, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({\n          success: false,\n          message: 'Senha atual incorreta'\n        });\n      }\n      var hashedNewPassword = yield bcrypt.hash(newPassword, 12);\n      yield prisma.user.update({\n        where: {\n          id: req.user.userId\n        },\n        data: {\n          password: hashedNewPassword\n        }\n      });\n      res.json({\n        success: true,\n        message: 'Senha alterada com sucesso'\n      });\n    } catch (error) {\n      console.error('Erro ao alterar senha:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  });\n  return function (_x5, _x6) {\n    return _ref3.apply(this, arguments);\n  };\n}());\nrouter.get('/stats', authenticateToken, function () {\n  var _ref4 = _asyncToGenerator(function* (req, res) {\n    try {\n      var userId = req.user.userId;\n      var _yield$Promise$all = yield Promise.all([prisma.userScore.count({\n          where: {\n            userId: userId\n          }\n        }), prisma.userProgress.count({\n          where: {\n            userId: userId\n          }\n        }), prisma.userScore.findMany({\n          where: {\n            userId: userId\n          },\n          include: {\n            sport: {\n              select: {\n                name: true,\n                icon: true,\n                color: true\n              }\n            }\n          },\n          orderBy: {\n            score: 'desc'\n          },\n          take: 5\n        }), prisma.userProgress.findMany({\n          where: {\n            userId: userId,\n            progress: 100\n          },\n          include: {\n            content: {\n              select: {\n                title: true,\n                type: true\n              }\n            }\n          },\n          orderBy: {\n            completedAt: 'desc'\n          },\n          take: 5\n        })]),\n        _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 4),\n        totalScores = _yield$Promise$all2[0],\n        totalProgress = _yield$Promise$all2[1],\n        userScores = _yield$Promise$all2[2],\n        userProgress = _yield$Promise$all2[3];\n      res.json({\n        success: true,\n        data: {\n          totalScores: totalScores,\n          totalProgress: totalProgress,\n          recentScores: userScores,\n          recentProgress: userProgress\n        }\n      });\n    } catch (error) {\n      console.error('Erro ao buscar estatísticas:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  });\n  return function (_x7, _x8) {\n    return _ref4.apply(this, arguments);\n  };\n}());\nrouter.delete('/account', authenticateToken, function () {\n  var _ref5 = _asyncToGenerator(function* (req, res) {\n    try {\n      var password = req.body.password;\n      if (!password) {\n        return res.status(400).json({\n          success: false,\n          message: 'Senha é obrigatória para deletar a conta'\n        });\n      }\n      var user = yield prisma.user.findUnique({\n        where: {\n          id: req.user.userId\n        }\n      });\n      if (!user) {\n        return res.status(404).json({\n          success: false,\n          message: 'Usuário não encontrado'\n        });\n      }\n      var isValidPassword = yield bcrypt.compare(password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({\n          success: false,\n          message: 'Senha incorreta'\n        });\n      }\n      yield prisma.user.delete({\n        where: {\n          id: req.user.userId\n        }\n      });\n      res.json({\n        success: true,\n        message: 'Conta deletada com sucesso'\n      });\n    } catch (error) {\n      console.error('Erro ao deletar conta:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  });\n  return function (_x9, _x0) {\n    return _ref5.apply(this, arguments);\n  };\n}());\nmodule.exports = router;","map":{"version":3,"names":["express","require","bcrypt","prisma","authenticateToken","req","res","next","authHeader","headers","token","split","status","json","success","message","jwt","verify","process","env","JWT_SECRET","err","user","router","Router","get","_ref","_asyncToGenerator","findUnique","where","id","userId","select","name","email","age","school","class","avatar","createdAt","updatedAt","userSports","include","sport","icon","color","data","error","console","_x","_x2","apply","arguments","put","_ref2","_req$body","body","userClass","updateData","undefined","parseInt","update","_x3","_x4","_ref3","_req$body2","currentPassword","newPassword","length","isValidPassword","compare","password","hashedNewPassword","hash","_x5","_x6","_ref4","_yield$Promise$all","Promise","all","userScore","count","userProgress","findMany","orderBy","score","take","progress","content","title","type","completedAt","_yield$Promise$all2","_slicedToArray","totalScores","totalProgress","userScores","recentScores","recentProgress","_x7","_x8","delete","_ref5","_x9","_x0","module","exports"],"sources":["C:/Users/lukag/OneDrive/Área de Trabalho/Muvz_App/api/routes/users.js"],"sourcesContent":["const express = require('express');\r\nconst bcrypt = require('bcryptjs');\r\nconst prisma = require('../prisma');\r\n// Importar authenticateToken do arquivo auth.js\r\nconst authenticateToken = (req, res, next) => {\r\n  const authHeader = req.headers['authorization'];\r\n  const token = authHeader && authHeader.split(' ')[1];\r\n\r\n  if (!token) {\r\n    return res.status(401).json({\r\n      success: false,\r\n      message: 'Token de acesso necessário'\r\n    });\r\n  }\r\n\r\n  const jwt = require('jsonwebtoken');\r\n  jwt.verify(token, process.env.JWT_SECRET || 'fallback-secret', (err, user) => {\r\n    if (err) {\r\n      return res.status(403).json({\r\n        success: false,\r\n        message: 'Token inválido ou expirado'\r\n      });\r\n    }\r\n    req.user = user;\r\n    next();\r\n  });\r\n};\r\n\r\nconst router = express.Router();\r\n\r\n// Buscar perfil do usuário\r\nrouter.get('/profile', authenticateToken, async (req, res) => {\r\n  try {\r\n    const user = await prisma.user.findUnique({\r\n      where: { id: req.user.userId },\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        email: true,\r\n        age: true,\r\n        school: true,\r\n        class: true,\r\n        avatar: true,\r\n        createdAt: true,\r\n        updatedAt: true,\r\n        userSports: {\r\n          include: {\r\n            sport: {\r\n              select: {\r\n                id: true,\r\n                name: true,\r\n                icon: true,\r\n                color: true\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    if (!user) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'Usuário não encontrado'\r\n      });\r\n    }\r\n\r\n    res.json({\r\n      success: true,\r\n      data: { user }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Erro ao buscar perfil:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Erro interno do servidor'\r\n    });\r\n  }\r\n});\r\n\r\n// Atualizar perfil do usuário\r\nrouter.put('/profile', authenticateToken, async (req, res) => {\r\n  try {\r\n    const { name, age, school, class: userClass, avatar } = req.body;\r\n\r\n    const updateData = {};\r\n    if (name) updateData.name = name;\r\n    if (age !== undefined) updateData.age = parseInt(age);\r\n    if (school !== undefined) updateData.school = school;\r\n    if (userClass !== undefined) updateData.class = userClass;\r\n    if (avatar !== undefined) updateData.avatar = avatar;\r\n\r\n    const user = await prisma.user.update({\r\n      where: { id: req.user.userId },\r\n      data: updateData,\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        email: true,\r\n        age: true,\r\n        school: true,\r\n        class: true,\r\n        avatar: true,\r\n        updatedAt: true\r\n      }\r\n    });\r\n\r\n    res.json({\r\n      success: true,\r\n      message: 'Perfil atualizado com sucesso',\r\n      data: { user }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Erro ao atualizar perfil:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Erro interno do servidor'\r\n    });\r\n  }\r\n});\r\n\r\n// Alterar senha\r\nrouter.put('/password', authenticateToken, async (req, res) => {\r\n  try {\r\n    const { currentPassword, newPassword } = req.body;\r\n\r\n    if (!currentPassword || !newPassword) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: 'Senha atual e nova senha são obrigatórias'\r\n      });\r\n    }\r\n\r\n    if (newPassword.length < 6) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: 'A nova senha deve ter pelo menos 6 caracteres'\r\n      });\r\n    }\r\n\r\n    // Buscar usuário com senha\r\n    const user = await prisma.user.findUnique({\r\n      where: { id: req.user.userId }\r\n    });\r\n\r\n    if (!user) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'Usuário não encontrado'\r\n      });\r\n    }\r\n\r\n    // Verificar senha atual\r\n    const isValidPassword = await bcrypt.compare(currentPassword, user.password);\r\n\r\n    if (!isValidPassword) {\r\n      return res.status(401).json({\r\n        success: false,\r\n        message: 'Senha atual incorreta'\r\n      });\r\n    }\r\n\r\n    // Hash da nova senha\r\n    const hashedNewPassword = await bcrypt.hash(newPassword, 12);\r\n\r\n    // Atualizar senha\r\n    await prisma.user.update({\r\n      where: { id: req.user.userId },\r\n      data: { password: hashedNewPassword }\r\n    });\r\n\r\n    res.json({\r\n      success: true,\r\n      message: 'Senha alterada com sucesso'\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Erro ao alterar senha:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Erro interno do servidor'\r\n    });\r\n  }\r\n});\r\n\r\n// Buscar estatísticas do usuário\r\nrouter.get('/stats', authenticateToken, async (req, res) => {\r\n  try {\r\n    const userId = req.user.userId;\r\n\r\n    const [\r\n      totalScores,\r\n      totalProgress,\r\n      userScores,\r\n      userProgress\r\n    ] = await Promise.all([\r\n      prisma.userScore.count({\r\n        where: { userId }\r\n      }),\r\n      prisma.userProgress.count({\r\n        where: { userId }\r\n      }),\r\n      prisma.userScore.findMany({\r\n        where: { userId },\r\n        include: {\r\n          sport: {\r\n            select: {\r\n              name: true,\r\n              icon: true,\r\n              color: true\r\n            }\r\n          }\r\n        },\r\n        orderBy: { score: 'desc' },\r\n        take: 5\r\n      }),\r\n      prisma.userProgress.findMany({\r\n        where: { \r\n          userId,\r\n          progress: 100\r\n        },\r\n        include: {\r\n          content: {\r\n            select: {\r\n              title: true,\r\n              type: true\r\n            }\r\n          }\r\n        },\r\n        orderBy: { completedAt: 'desc' },\r\n        take: 5\r\n      })\r\n    ]);\r\n\r\n    res.json({\r\n      success: true,\r\n      data: {\r\n        totalScores,\r\n        totalProgress,\r\n        recentScores: userScores,\r\n        recentProgress: userProgress\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Erro ao buscar estatísticas:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Erro interno do servidor'\r\n    });\r\n  }\r\n});\r\n\r\n// Deletar conta\r\nrouter.delete('/account', authenticateToken, async (req, res) => {\r\n  try {\r\n    const { password } = req.body;\r\n\r\n    if (!password) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: 'Senha é obrigatória para deletar a conta'\r\n      });\r\n    }\r\n\r\n    // Buscar usuário com senha\r\n    const user = await prisma.user.findUnique({\r\n      where: { id: req.user.userId }\r\n    });\r\n\r\n    if (!user) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'Usuário não encontrado'\r\n      });\r\n    }\r\n\r\n    // Verificar senha\r\n    const isValidPassword = await bcrypt.compare(password, user.password);\r\n\r\n    if (!isValidPassword) {\r\n      return res.status(401).json({\r\n        success: false,\r\n        message: 'Senha incorreta'\r\n      });\r\n    }\r\n\r\n    // Deletar usuário (cascade vai deletar dados relacionados)\r\n    await prisma.user.delete({\r\n      where: { id: req.user.userId }\r\n    });\r\n\r\n    res.json({\r\n      success: true,\r\n      message: 'Conta deletada com sucesso'\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Erro ao deletar conta:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Erro interno do servidor'\r\n    });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}