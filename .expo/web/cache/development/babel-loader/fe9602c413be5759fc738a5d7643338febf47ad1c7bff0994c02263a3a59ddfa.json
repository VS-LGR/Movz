{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar Storage = function () {\n  function Storage() {\n    _classCallCheck(this, Storage);\n  }\n  return _createClass(Storage, [{\n    key: \"getItem\",\n    value: function () {\n      var _getItem = _asyncToGenerator(function* (key) {\n        try {\n          if (Platform.OS === 'web') {\n            return localStorage.getItem(key);\n          } else {\n            var AsyncStorage = require('@react-native-async-storage/async-storage').default;\n            return yield AsyncStorage.getItem(key);\n          }\n        } catch (error) {\n          console.error('Error getting item from storage:', error);\n          return null;\n        }\n      });\n      function getItem(_x) {\n        return _getItem.apply(this, arguments);\n      }\n      return getItem;\n    }()\n  }, {\n    key: \"setItem\",\n    value: function () {\n      var _setItem = _asyncToGenerator(function* (key, value) {\n        try {\n          if (Platform.OS === 'web') {\n            localStorage.setItem(key, value);\n          } else {\n            var AsyncStorage = require('@react-native-async-storage/async-storage').default;\n            yield AsyncStorage.setItem(key, value);\n          }\n        } catch (error) {\n          console.error('Error setting item in storage:', error);\n        }\n      });\n      function setItem(_x2, _x3) {\n        return _setItem.apply(this, arguments);\n      }\n      return setItem;\n    }()\n  }, {\n    key: \"removeItem\",\n    value: function () {\n      var _removeItem = _asyncToGenerator(function* (key) {\n        try {\n          if (Platform.OS === 'web') {\n            localStorage.removeItem(key);\n          } else {\n            var AsyncStorage = require('@react-native-async-storage/async-storage').default;\n            yield AsyncStorage.removeItem(key);\n          }\n        } catch (error) {\n          console.error('Error removing item from storage:', error);\n        }\n      });\n      function removeItem(_x4) {\n        return _removeItem.apply(this, arguments);\n      }\n      return removeItem;\n    }()\n  }]);\n}();\nexport default new Storage();","map":{"version":3,"names":["Storage","_classCallCheck","_createClass","key","value","_getItem","_asyncToGenerator","Platform","OS","localStorage","getItem","AsyncStorage","require","default","error","console","_x","apply","arguments","_setItem","setItem","_x2","_x3","_removeItem","removeItem","_x4"],"sources":["C:/Users/lukag/OneDrive/Área de Trabalho/Muvz_App/src/utils/storage.js"],"sourcesContent":["// Sistema de armazenamento compatível com web e mobile\r\nimport { Platform } from 'react-native';\r\n\r\nclass Storage {\r\n  async getItem(key) {\r\n    try {\r\n      if (Platform.OS === 'web') {\r\n        return localStorage.getItem(key);\r\n      } else {\r\n        // Para React Native, usar AsyncStorage quando disponível\r\n        const AsyncStorage = require('@react-native-async-storage/async-storage').default;\r\n        return await AsyncStorage.getItem(key);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error getting item from storage:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async setItem(key, value) {\r\n    try {\r\n      if (Platform.OS === 'web') {\r\n        localStorage.setItem(key, value);\r\n      } else {\r\n        // Para React Native, usar AsyncStorage quando disponível\r\n        const AsyncStorage = require('@react-native-async-storage/async-storage').default;\r\n        await AsyncStorage.setItem(key, value);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error setting item in storage:', error);\r\n    }\r\n  }\r\n\r\n  async removeItem(key) {\r\n    try {\r\n      if (Platform.OS === 'web') {\r\n        localStorage.removeItem(key);\r\n      } else {\r\n        // Para React Native, usar AsyncStorage quando disponível\r\n        const AsyncStorage = require('@react-native-async-storage/async-storage').default;\r\n        await AsyncStorage.removeItem(key);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error removing item from storage:', error);\r\n    }\r\n  }\r\n}\r\n\r\nexport default new Storage();\r\n"],"mappings":";;;;IAGMA,OAAO;EAAA,SAAAA,QAAA;IAAAC,eAAA,OAAAD,OAAA;EAAA;EAAA,OAAAE,YAAA,CAAAF,OAAA;IAAAG,GAAA;IAAAC,KAAA;MAAA,IAAAC,QAAA,GAAAC,iBAAA,CACX,WAAcH,GAAG,EAAE;QACjB,IAAI;UACF,IAAII,QAAQ,CAACC,EAAE,KAAK,KAAK,EAAE;YACzB,OAAOC,YAAY,CAACC,OAAO,CAACP,GAAG,CAAC;UAClC,CAAC,MAAM;YAEL,IAAMQ,YAAY,GAAGC,OAAO,CAAC,2CAA2C,CAAC,CAACC,OAAO;YACjF,aAAaF,YAAY,CAACD,OAAO,CAACP,GAAG,CAAC;UACxC;QACF,CAAC,CAAC,OAAOW,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;UACxD,OAAO,IAAI;QACb;MACF,CAAC;MAAA,SAbKJ,OAAOA,CAAAM,EAAA;QAAA,OAAAX,QAAA,CAAAY,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAPR,OAAO;IAAA;EAAA;IAAAP,GAAA;IAAAC,KAAA;MAAA,IAAAe,QAAA,GAAAb,iBAAA,CAeb,WAAcH,GAAG,EAAEC,KAAK,EAAE;QACxB,IAAI;UACF,IAAIG,QAAQ,CAACC,EAAE,KAAK,KAAK,EAAE;YACzBC,YAAY,CAACW,OAAO,CAACjB,GAAG,EAAEC,KAAK,CAAC;UAClC,CAAC,MAAM;YAEL,IAAMO,YAAY,GAAGC,OAAO,CAAC,2CAA2C,CAAC,CAACC,OAAO;YACjF,MAAMF,YAAY,CAACS,OAAO,CAACjB,GAAG,EAAEC,KAAK,CAAC;UACxC;QACF,CAAC,CAAC,OAAOU,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;QACxD;MACF,CAAC;MAAA,SAZKM,OAAOA,CAAAC,GAAA,EAAAC,GAAA;QAAA,OAAAH,QAAA,CAAAF,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAPE,OAAO;IAAA;EAAA;IAAAjB,GAAA;IAAAC,KAAA;MAAA,IAAAmB,WAAA,GAAAjB,iBAAA,CAcb,WAAiBH,GAAG,EAAE;QACpB,IAAI;UACF,IAAII,QAAQ,CAACC,EAAE,KAAK,KAAK,EAAE;YACzBC,YAAY,CAACe,UAAU,CAACrB,GAAG,CAAC;UAC9B,CAAC,MAAM;YAEL,IAAMQ,YAAY,GAAGC,OAAO,CAAC,2CAA2C,CAAC,CAACC,OAAO;YACjF,MAAMF,YAAY,CAACa,UAAU,CAACrB,GAAG,CAAC;UACpC;QACF,CAAC,CAAC,OAAOW,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;QAC3D;MACF,CAAC;MAAA,SAZKU,UAAUA,CAAAC,GAAA;QAAA,OAAAF,WAAA,CAAAN,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAVM,UAAU;IAAA;EAAA;AAAA;AAelB,eAAe,IAAIxB,OAAO,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}