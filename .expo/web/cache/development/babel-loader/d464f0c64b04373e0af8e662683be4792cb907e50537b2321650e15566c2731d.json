{"ast":null,"code":"var _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar fetch = require('node-fetch');\nvar API_BASE_URL = 'http://localhost:3001/api';\nfunction viewDatabase() {\n  return _viewDatabase.apply(this, arguments);\n}\nfunction _viewDatabase() {\n  _viewDatabase = _asyncToGenerator(function* () {\n    console.log('üìä Visualizando dados do banco de dados...\\n');\n    try {\n      console.log('1. Verificando API...');\n      var healthResponse = yield fetch('http://localhost:3001/health');\n      var healthData = yield healthResponse.json();\n      console.log('‚úÖ API:', healthData.status);\n      console.log('');\n      console.log('2. Esportes cadastrados:');\n      var sportsResponse = yield fetch(`${API_BASE_URL}/sports`);\n      var sportsData = yield sportsResponse.json();\n      if (sportsData.success) {\n        sportsData.data.sports.forEach(function (sport, index) {\n          console.log(`   ${index + 1}. ${sport.name} (${sport.icon})`);\n          console.log(`      Descri√ß√£o: ${sport.description}`);\n          console.log(`      Cor: ${sport.color}`);\n          console.log(`      Conte√∫dos: ${sport._count.contents}`);\n          console.log(`      Usu√°rios inscritos: ${sport._count.userSports}`);\n          console.log('');\n        });\n      }\n      console.log('3. Testando registro de usu√°rio...');\n      var testUser = {\n        name: 'Usu√°rio Teste',\n        email: 'teste@exemplo.com',\n        password: '123456',\n        age: 25,\n        school: 'Escola Teste',\n        class: 'Turma A'\n      };\n      var registerResponse = yield fetch(`${API_BASE_URL}/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(testUser)\n      });\n      var registerResult = yield registerResponse.json();\n      if (registerResult.success) {\n        console.log('‚úÖ Usu√°rio de teste criado:');\n        console.log(`   Nome: ${registerResult.data.user.name}`);\n        console.log(`   Email: ${registerResult.data.user.email}`);\n        console.log(`   Idade: ${registerResult.data.user.age}`);\n        console.log(`   Escola: ${registerResult.data.user.school}`);\n        console.log(`   Turma: ${registerResult.data.user.class}`);\n        console.log(`   Token: ${registerResult.data.token.substring(0, 20)}...`);\n        console.log('');\n        console.log('4. Testando login...');\n        var loginResponse = yield fetch(`${API_BASE_URL}/auth/login`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email: 'teste@exemplo.com',\n            password: '123456'\n          })\n        });\n        var loginResult = yield loginResponse.json();\n        if (loginResult.success) {\n          console.log('‚úÖ Login realizado com sucesso!');\n          console.log(`   Usu√°rio: ${loginResult.data.user.name}`);\n          console.log('');\n          console.log('5. Testando inscri√ß√£o em esporte...');\n          var sportId = sportsData.data.sports[0].id;\n          var joinResponse = yield fetch(`${API_BASE_URL}/sports/${sportId}/join`, {\n            method: 'POST',\n            headers: {\n              'Authorization': `Bearer ${loginResult.data.token}`\n            }\n          });\n          var joinResult = yield joinResponse.json();\n          if (joinResult.success) {\n            console.log(`‚úÖ Inscrito no esporte: ${sportsData.data.sports[0].name}`);\n            console.log('');\n            console.log('6. Testando registro de pontua√ß√£o...');\n            var scoreResponse = yield fetch(`${API_BASE_URL}/scores`, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${loginResult.data.token}`\n              },\n              body: JSON.stringify({\n                sportId: sportId,\n                score: 150,\n                level: 3\n              })\n            });\n            var scoreResult = yield scoreResponse.json();\n            if (scoreResult.success) {\n              console.log('‚úÖ Pontua√ß√£o registrada:');\n              console.log(`   Esporte: ${scoreResult.data.userScore.sport.name}`);\n              console.log(`   Pontua√ß√£o: ${scoreResult.data.userScore.score}`);\n              console.log(`   N√≠vel: ${scoreResult.data.userScore.level}`);\n              console.log('');\n            }\n          }\n        }\n      }\n      console.log('üéâ Banco de dados funcionando perfeitamente!');\n      console.log('\\nüì± Para testar o frontend:');\n      console.log('1. Acesse: http://localhost:19006');\n      console.log('2. Teste o cadastro e login');\n      console.log('\\nüîß Para visualizar dados:');\n      console.log('1. Prisma Studio: http://localhost:5555');\n      console.log('2. Ou use um visualizador SQLite no arquivo: prisma/dev.db');\n    } catch (error) {\n      console.error('‚ùå Erro ao visualizar banco:', error.message);\n    }\n  });\n  return _viewDatabase.apply(this, arguments);\n}\nviewDatabase();","map":{"version":3,"names":["fetch","require","API_BASE_URL","viewDatabase","_viewDatabase","apply","arguments","_asyncToGenerator","console","log","healthResponse","healthData","json","status","sportsResponse","sportsData","success","data","sports","forEach","sport","index","name","icon","description","color","_count","contents","userSports","testUser","email","password","age","school","class","registerResponse","method","headers","body","JSON","stringify","registerResult","user","token","substring","loginResponse","loginResult","sportId","id","joinResponse","joinResult","scoreResponse","score","level","scoreResult","userScore","error","message"],"sources":["C:/Users/lukag/OneDrive/√Årea de Trabalho/Muvz_App/view-database.js"],"sourcesContent":["// Script para visualizar dados do banco via API\r\nconst fetch = require('node-fetch');\r\n\r\nconst API_BASE_URL = 'http://localhost:3001/api';\r\n\r\nasync function viewDatabase() {\r\n  console.log('üìä Visualizando dados do banco de dados...\\n');\r\n\r\n  try {\r\n    // 1. Verificar sa√∫de da API\r\n    console.log('1. Verificando API...');\r\n    const healthResponse = await fetch('http://localhost:3001/health');\r\n    const healthData = await healthResponse.json();\r\n    console.log('‚úÖ API:', healthData.status);\r\n    console.log('');\r\n\r\n    // 2. Listar esportes\r\n    console.log('2. Esportes cadastrados:');\r\n    const sportsResponse = await fetch(`${API_BASE_URL}/sports`);\r\n    const sportsData = await sportsResponse.json();\r\n    \r\n    if (sportsData.success) {\r\n      sportsData.data.sports.forEach((sport, index) => {\r\n        console.log(`   ${index + 1}. ${sport.name} (${sport.icon})`);\r\n        console.log(`      Descri√ß√£o: ${sport.description}`);\r\n        console.log(`      Cor: ${sport.color}`);\r\n        console.log(`      Conte√∫dos: ${sport._count.contents}`);\r\n        console.log(`      Usu√°rios inscritos: ${sport._count.userSports}`);\r\n        console.log('');\r\n      });\r\n    }\r\n\r\n    // 3. Listar usu√°rios (via registro de teste)\r\n    console.log('3. Testando registro de usu√°rio...');\r\n    const testUser = {\r\n      name: 'Usu√°rio Teste',\r\n      email: 'teste@exemplo.com',\r\n      password: '123456',\r\n      age: 25,\r\n      school: 'Escola Teste',\r\n      class: 'Turma A'\r\n    };\r\n\r\n    const registerResponse = await fetch(`${API_BASE_URL}/auth/register`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(testUser),\r\n    });\r\n\r\n    const registerResult = await registerResponse.json();\r\n    \r\n    if (registerResult.success) {\r\n      console.log('‚úÖ Usu√°rio de teste criado:');\r\n      console.log(`   Nome: ${registerResult.data.user.name}`);\r\n      console.log(`   Email: ${registerResult.data.user.email}`);\r\n      console.log(`   Idade: ${registerResult.data.user.age}`);\r\n      console.log(`   Escola: ${registerResult.data.user.school}`);\r\n      console.log(`   Turma: ${registerResult.data.user.class}`);\r\n      console.log(`   Token: ${registerResult.data.token.substring(0, 20)}...`);\r\n      console.log('');\r\n\r\n      // 4. Testar login\r\n      console.log('4. Testando login...');\r\n      const loginResponse = await fetch(`${API_BASE_URL}/auth/login`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          email: 'teste@exemplo.com',\r\n          password: '123456'\r\n        }),\r\n      });\r\n\r\n      const loginResult = await loginResponse.json();\r\n      \r\n      if (loginResult.success) {\r\n        console.log('‚úÖ Login realizado com sucesso!');\r\n        console.log(`   Usu√°rio: ${loginResult.data.user.name}`);\r\n        console.log('');\r\n\r\n        // 5. Testar inscri√ß√£o em esporte\r\n        console.log('5. Testando inscri√ß√£o em esporte...');\r\n        const sportId = sportsData.data.sports[0].id;\r\n        const joinResponse = await fetch(`${API_BASE_URL}/sports/${sportId}/join`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Authorization': `Bearer ${loginResult.data.token}`,\r\n          },\r\n        });\r\n\r\n        const joinResult = await joinResponse.json();\r\n        \r\n        if (joinResult.success) {\r\n          console.log(`‚úÖ Inscrito no esporte: ${sportsData.data.sports[0].name}`);\r\n          console.log('');\r\n\r\n          // 6. Testar registro de pontua√ß√£o\r\n          console.log('6. Testando registro de pontua√ß√£o...');\r\n          const scoreResponse = await fetch(`${API_BASE_URL}/scores`, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization': `Bearer ${loginResult.data.token}`,\r\n            },\r\n            body: JSON.stringify({\r\n              sportId: sportId,\r\n              score: 150,\r\n              level: 3\r\n            }),\r\n          });\r\n\r\n          const scoreResult = await scoreResponse.json();\r\n          \r\n          if (scoreResult.success) {\r\n            console.log('‚úÖ Pontua√ß√£o registrada:');\r\n            console.log(`   Esporte: ${scoreResult.data.userScore.sport.name}`);\r\n            console.log(`   Pontua√ß√£o: ${scoreResult.data.userScore.score}`);\r\n            console.log(`   N√≠vel: ${scoreResult.data.userScore.level}`);\r\n            console.log('');\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log('üéâ Banco de dados funcionando perfeitamente!');\r\n    console.log('\\nüì± Para testar o frontend:');\r\n    console.log('1. Acesse: http://localhost:19006');\r\n    console.log('2. Teste o cadastro e login');\r\n    console.log('\\nüîß Para visualizar dados:');\r\n    console.log('1. Prisma Studio: http://localhost:5555');\r\n    console.log('2. Ou use um visualizador SQLite no arquivo: prisma/dev.db');\r\n\r\n  } catch (error) {\r\n    console.error('‚ùå Erro ao visualizar banco:', error.message);\r\n  }\r\n}\r\n\r\n// Executar\r\nviewDatabase();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}