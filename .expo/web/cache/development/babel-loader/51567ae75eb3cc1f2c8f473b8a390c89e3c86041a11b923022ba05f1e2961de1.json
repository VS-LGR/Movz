{"ast":null,"code":"var _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar fetch = require('node-fetch');\nvar API_BASE_URL = 'http://localhost:3001/api';\nfunction testAPI() {\n  return _testAPI.apply(this, arguments);\n}\nfunction _testAPI() {\n  _testAPI = _asyncToGenerator(function* () {\n    console.log('üß™ Iniciando testes da API...\\n');\n    try {\n      console.log('1. Testando Health Check...');\n      var healthResponse = yield fetch(`${API_BASE_URL.replace('/api', '')}/health`);\n      var healthData = yield healthResponse.json();\n      console.log('‚úÖ Health Check:', healthData.status);\n      console.log('');\n      console.log('2. Testando listagem de esportes...');\n      var sportsResponse = yield fetch(`${API_BASE_URL}/sports`);\n      var sportsData = yield sportsResponse.json();\n      console.log('‚úÖ Esportes encontrados:', sportsData.data.sports.length);\n      console.log('');\n      console.log('3. Testando registro de usu√°rio...');\n      var registerData = {\n        name: 'Teste Usu√°rio',\n        email: 'teste@exemplo.com',\n        password: '123456',\n        age: 25,\n        school: 'Escola Teste',\n        class: 'Turma A'\n      };\n      var registerResponse = yield fetch(`${API_BASE_URL}/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(registerData)\n      });\n      var registerResult = yield registerResponse.json();\n      if (registerResult.success) {\n        console.log('‚úÖ Usu√°rio registrado com sucesso');\n        var token = registerResult.data.token;\n        console.log('Token:', token.substring(0, 20) + '...');\n        console.log('');\n        console.log('4. Testando login...');\n        var loginResponse = yield fetch(`${API_BASE_URL}/auth/login`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email: 'teste@exemplo.com',\n            password: '123456'\n          })\n        });\n        var loginResult = yield loginResponse.json();\n        if (loginResult.success) {\n          console.log('‚úÖ Login realizado com sucesso');\n          console.log('');\n          console.log('5. Testando verifica√ß√£o de token...');\n          var verifyResponse = yield fetch(`${API_BASE_URL}/auth/verify`, {\n            headers: {\n              'Authorization': `Bearer ${token}`\n            }\n          });\n          var verifyResult = yield verifyResponse.json();\n          if (verifyResult.success) {\n            console.log('‚úÖ Token verificado com sucesso');\n            console.log('Usu√°rio:', verifyResult.data.user.name);\n            console.log('');\n            console.log('6. Testando busca de perfil...');\n            var profileResponse = yield fetch(`${API_BASE_URL}/users/profile`, {\n              headers: {\n                'Authorization': `Bearer ${token}`\n              }\n            });\n            var profileResult = yield profileResponse.json();\n            if (profileResult.success) {\n              console.log('‚úÖ Perfil carregado com sucesso');\n              console.log('Nome:', profileResult.data.user.name);\n              console.log('Email:', profileResult.data.user.email);\n              console.log('');\n              console.log('7. Testando inscri√ß√£o em esporte...');\n              var sportId = sportsData.data.sports[0].id;\n              var joinResponse = yield fetch(`${API_BASE_URL}/sports/${sportId}/join`, {\n                method: 'POST',\n                headers: {\n                  'Authorization': `Bearer ${token}`\n                }\n              });\n              var joinResult = yield joinResponse.json();\n              if (joinResult.success) {\n                console.log('‚úÖ Inscrito no esporte com sucesso');\n                console.log('');\n                console.log('8. Testando registro de pontua√ß√£o...');\n                var scoreResponse = yield fetch(`${API_BASE_URL}/scores`, {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${token}`\n                  },\n                  body: JSON.stringify({\n                    sportId: sportId,\n                    score: 100,\n                    level: 1\n                  })\n                });\n                var scoreResult = yield scoreResponse.json();\n                if (scoreResult.success) {\n                  console.log('‚úÖ Pontua√ß√£o registrada com sucesso');\n                  console.log('Score:', scoreResult.data.userScore.score);\n                  console.log('Level:', scoreResult.data.userScore.level);\n                  console.log('');\n                  console.log('9. Testando envio de mensagem...');\n                  var chatResponse = yield fetch(`${API_BASE_URL}/chat/send`, {\n                    method: 'POST',\n                    headers: {\n                      'Content-Type': 'application/json',\n                      'Authorization': `Bearer ${token}`\n                    },\n                    body: JSON.stringify({\n                      message: 'Teste de mensagem via API! üöÄ'\n                    })\n                  });\n                  var chatResult = yield chatResponse.json();\n                  if (chatResult.success) {\n                    console.log('‚úÖ Mensagem enviada com sucesso');\n                    console.log('Mensagem:', chatResult.data.chatMessage.message);\n                    console.log('');\n                    console.log('üéâ Todos os testes passaram com sucesso!');\n                    console.log('A API est√° funcionando corretamente.');\n                  } else {\n                    console.log('‚ùå Erro no envio de mensagem:', chatResult.message);\n                  }\n                } else {\n                  console.log('‚ùå Erro no registro de pontua√ß√£o:', scoreResult.message);\n                }\n              } else {\n                console.log('‚ùå Erro na inscri√ß√£o no esporte:', joinResult.message);\n              }\n            } else {\n              console.log('‚ùå Erro ao carregar perfil:', profileResult.message);\n            }\n          } else {\n            console.log('‚ùå Erro na verifica√ß√£o do token:', verifyResult.message);\n          }\n        } else {\n          console.log('‚ùå Erro no login:', loginResult.message);\n        }\n      } else {\n        console.log('‚ùå Erro no registro:', registerResult.message);\n      }\n    } catch (error) {\n      console.error('‚ùå Erro durante os testes:', error.message);\n      console.log('\\nüí° Dicas:');\n      console.log('- Certifique-se de que a API est√° rodando (npm run api)');\n      console.log('- Verifique se o banco de dados est√° configurado');\n      console.log('- Execute npm run db:seed para popular o banco');\n    }\n  });\n  return _testAPI.apply(this, arguments);\n}\ntestAPI();","map":{"version":3,"names":["fetch","require","API_BASE_URL","testAPI","_testAPI","apply","arguments","_asyncToGenerator","console","log","healthResponse","replace","healthData","json","status","sportsResponse","sportsData","data","sports","length","registerData","name","email","password","age","school","class","registerResponse","method","headers","body","JSON","stringify","registerResult","success","token","substring","loginResponse","loginResult","verifyResponse","verifyResult","user","profileResponse","profileResult","sportId","id","joinResponse","joinResult","scoreResponse","score","level","scoreResult","userScore","chatResponse","message","chatResult","chatMessage","error"],"sources":["C:/Users/lukag/OneDrive/√Årea de Trabalho/Muvz_App/test-api.js"],"sourcesContent":["// Script para testar a API\r\nconst fetch = require('node-fetch');\r\n\r\nconst API_BASE_URL = 'http://localhost:3001/api';\r\n\r\nasync function testAPI() {\r\n  console.log('üß™ Iniciando testes da API...\\n');\r\n\r\n  try {\r\n    // Teste 1: Health Check\r\n    console.log('1. Testando Health Check...');\r\n    const healthResponse = await fetch(`${API_BASE_URL.replace('/api', '')}/health`);\r\n    const healthData = await healthResponse.json();\r\n    console.log('‚úÖ Health Check:', healthData.status);\r\n    console.log('');\r\n\r\n    // Teste 2: Listar esportes\r\n    console.log('2. Testando listagem de esportes...');\r\n    const sportsResponse = await fetch(`${API_BASE_URL}/sports`);\r\n    const sportsData = await sportsResponse.json();\r\n    console.log('‚úÖ Esportes encontrados:', sportsData.data.sports.length);\r\n    console.log('');\r\n\r\n    // Teste 3: Registrar usu√°rio\r\n    console.log('3. Testando registro de usu√°rio...');\r\n    const registerData = {\r\n      name: 'Teste Usu√°rio',\r\n      email: 'teste@exemplo.com',\r\n      password: '123456',\r\n      age: 25,\r\n      school: 'Escola Teste',\r\n      class: 'Turma A'\r\n    };\r\n\r\n    const registerResponse = await fetch(`${API_BASE_URL}/auth/register`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(registerData),\r\n    });\r\n\r\n    const registerResult = await registerResponse.json();\r\n    \r\n    if (registerResult.success) {\r\n      console.log('‚úÖ Usu√°rio registrado com sucesso');\r\n      const token = registerResult.data.token;\r\n      console.log('Token:', token.substring(0, 20) + '...');\r\n      console.log('');\r\n\r\n      // Teste 4: Login\r\n      console.log('4. Testando login...');\r\n      const loginResponse = await fetch(`${API_BASE_URL}/auth/login`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          email: 'teste@exemplo.com',\r\n          password: '123456'\r\n        }),\r\n      });\r\n\r\n      const loginResult = await loginResponse.json();\r\n      \r\n      if (loginResult.success) {\r\n        console.log('‚úÖ Login realizado com sucesso');\r\n        console.log('');\r\n\r\n        // Teste 5: Verificar token\r\n        console.log('5. Testando verifica√ß√£o de token...');\r\n        const verifyResponse = await fetch(`${API_BASE_URL}/auth/verify`, {\r\n          headers: {\r\n            'Authorization': `Bearer ${token}`,\r\n          },\r\n        });\r\n\r\n        const verifyResult = await verifyResponse.json();\r\n        \r\n        if (verifyResult.success) {\r\n          console.log('‚úÖ Token verificado com sucesso');\r\n          console.log('Usu√°rio:', verifyResult.data.user.name);\r\n          console.log('');\r\n\r\n          // Teste 6: Buscar perfil\r\n          console.log('6. Testando busca de perfil...');\r\n          const profileResponse = await fetch(`${API_BASE_URL}/users/profile`, {\r\n            headers: {\r\n              'Authorization': `Bearer ${token}`,\r\n            },\r\n          });\r\n\r\n          const profileResult = await profileResponse.json();\r\n          \r\n          if (profileResult.success) {\r\n            console.log('‚úÖ Perfil carregado com sucesso');\r\n            console.log('Nome:', profileResult.data.user.name);\r\n            console.log('Email:', profileResult.data.user.email);\r\n            console.log('');\r\n\r\n            // Teste 7: Inscrever-se em esporte\r\n            console.log('7. Testando inscri√ß√£o em esporte...');\r\n            const sportId = sportsData.data.sports[0].id;\r\n            const joinResponse = await fetch(`${API_BASE_URL}/sports/${sportId}/join`, {\r\n              method: 'POST',\r\n              headers: {\r\n                'Authorization': `Bearer ${token}`,\r\n              },\r\n            });\r\n\r\n            const joinResult = await joinResponse.json();\r\n            \r\n            if (joinResult.success) {\r\n              console.log('‚úÖ Inscrito no esporte com sucesso');\r\n              console.log('');\r\n\r\n              // Teste 8: Registrar pontua√ß√£o\r\n              console.log('8. Testando registro de pontua√ß√£o...');\r\n              const scoreResponse = await fetch(`${API_BASE_URL}/scores`, {\r\n                method: 'POST',\r\n                headers: {\r\n                  'Content-Type': 'application/json',\r\n                  'Authorization': `Bearer ${token}`,\r\n                },\r\n                body: JSON.stringify({\r\n                  sportId: sportId,\r\n                  score: 100,\r\n                  level: 1\r\n                }),\r\n              });\r\n\r\n              const scoreResult = await scoreResponse.json();\r\n              \r\n              if (scoreResult.success) {\r\n                console.log('‚úÖ Pontua√ß√£o registrada com sucesso');\r\n                console.log('Score:', scoreResult.data.userScore.score);\r\n                console.log('Level:', scoreResult.data.userScore.level);\r\n                console.log('');\r\n\r\n                // Teste 9: Enviar mensagem no chat\r\n                console.log('9. Testando envio de mensagem...');\r\n                const chatResponse = await fetch(`${API_BASE_URL}/chat/send`, {\r\n                  method: 'POST',\r\n                  headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${token}`,\r\n                  },\r\n                  body: JSON.stringify({\r\n                    message: 'Teste de mensagem via API! üöÄ'\r\n                  }),\r\n                });\r\n\r\n                const chatResult = await chatResponse.json();\r\n                \r\n                if (chatResult.success) {\r\n                  console.log('‚úÖ Mensagem enviada com sucesso');\r\n                  console.log('Mensagem:', chatResult.data.chatMessage.message);\r\n                  console.log('');\r\n\r\n                  console.log('üéâ Todos os testes passaram com sucesso!');\r\n                  console.log('A API est√° funcionando corretamente.');\r\n                } else {\r\n                  console.log('‚ùå Erro no envio de mensagem:', chatResult.message);\r\n                }\r\n              } else {\r\n                console.log('‚ùå Erro no registro de pontua√ß√£o:', scoreResult.message);\r\n              }\r\n            } else {\r\n              console.log('‚ùå Erro na inscri√ß√£o no esporte:', joinResult.message);\r\n            }\r\n          } else {\r\n            console.log('‚ùå Erro ao carregar perfil:', profileResult.message);\r\n          }\r\n        } else {\r\n          console.log('‚ùå Erro na verifica√ß√£o do token:', verifyResult.message);\r\n        }\r\n      } else {\r\n        console.log('‚ùå Erro no login:', loginResult.message);\r\n      }\r\n    } else {\r\n      console.log('‚ùå Erro no registro:', registerResult.message);\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('‚ùå Erro durante os testes:', error.message);\r\n    console.log('\\nüí° Dicas:');\r\n    console.log('- Certifique-se de que a API est√° rodando (npm run api)');\r\n    console.log('- Verifique se o banco de dados est√° configurado');\r\n    console.log('- Execute npm run db:seed para popular o banco');\r\n  }\r\n}\r\n\r\n// Executar testes\r\ntestAPI();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}