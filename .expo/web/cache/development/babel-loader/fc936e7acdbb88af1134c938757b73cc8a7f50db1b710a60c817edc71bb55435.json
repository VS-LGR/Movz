{"ast":null,"code":"var _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar express = require('express');\nvar prisma = require(\"../prisma\");\nvar authenticateToken = function authenticateToken(req, res, next) {\n  var authHeader = req.headers['authorization'];\n  var token = authHeader && authHeader.split(' ')[1];\n  if (!token) {\n    return res.status(401).json({\n      success: false,\n      message: 'Token de acesso necessário'\n    });\n  }\n  var jwt = require('jsonwebtoken');\n  jwt.verify(token, process.env.JWT_SECRET || 'fallback-secret', function (err, user) {\n    if (err) {\n      return res.status(403).json({\n        success: false,\n        message: 'Token inválido ou expirado'\n      });\n    }\n    req.user = user;\n    next();\n  });\n};\nvar router = express.Router();\nrouter.get('/', function () {\n  var _ref = _asyncToGenerator(function* (req, res) {\n    try {\n      var sports = yield prisma.sport.findMany({\n        where: {\n          isActive: true\n        },\n        select: {\n          id: true,\n          name: true,\n          description: true,\n          icon: true,\n          color: true,\n          _count: {\n            select: {\n              contents: true,\n              userSports: true\n            }\n          }\n        },\n        orderBy: {\n          name: 'asc'\n        }\n      });\n      res.json({\n        success: true,\n        data: {\n          sports: sports\n        }\n      });\n    } catch (error) {\n      console.error('Erro ao buscar esportes:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  });\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}());\nrouter.get('/:id', function () {\n  var _ref2 = _asyncToGenerator(function* (req, res) {\n    try {\n      var id = req.params.id;\n      var sport = yield prisma.sport.findUnique({\n        where: {\n          id: id\n        },\n        include: {\n          contents: {\n            where: {\n              isActive: true\n            },\n            select: {\n              id: true,\n              title: true,\n              description: true,\n              type: true,\n              difficulty: true,\n              duration: true,\n              imageUrl: true\n            },\n            orderBy: [{\n              type: 'asc'\n            }, {\n              difficulty: 'asc'\n            }]\n          },\n          _count: {\n            select: {\n              userSports: true,\n              contents: true\n            }\n          }\n        }\n      });\n      if (!sport) {\n        return res.status(404).json({\n          success: false,\n          message: 'Esporte não encontrado'\n        });\n      }\n      res.json({\n        success: true,\n        data: {\n          sport: sport\n        }\n      });\n    } catch (error) {\n      console.error('Erro ao buscar esporte:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  });\n  return function (_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nrouter.post('/:id/join', authenticateToken, function () {\n  var _ref3 = _asyncToGenerator(function* (req, res) {\n    try {\n      var sportId = req.params.id;\n      var userId = req.user.userId;\n      var sport = yield prisma.sport.findUnique({\n        where: {\n          id: sportId\n        }\n      });\n      if (!sport) {\n        return res.status(404).json({\n          success: false,\n          message: 'Esporte não encontrado'\n        });\n      }\n      var existingUserSport = yield prisma.userSport.findUnique({\n        where: {\n          userId_sportId: {\n            userId: userId,\n            sportId: sportId\n          }\n        }\n      });\n      if (existingUserSport) {\n        if (existingUserSport.isActive) {\n          return res.status(409).json({\n            success: false,\n            message: 'Você já está inscrito neste esporte'\n          });\n        } else {\n          yield prisma.userSport.update({\n            where: {\n              id: existingUserSport.id\n            },\n            data: {\n              isActive: true\n            }\n          });\n          return res.json({\n            success: true,\n            message: 'Inscrição reativada com sucesso'\n          });\n        }\n      }\n      yield prisma.userSport.create({\n        data: {\n          userId: userId,\n          sportId: sportId\n        }\n      });\n      res.json({\n        success: true,\n        message: 'Inscrito no esporte com sucesso'\n      });\n    } catch (error) {\n      console.error('Erro ao se inscrever no esporte:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  });\n  return function (_x5, _x6) {\n    return _ref3.apply(this, arguments);\n  };\n}());\nrouter.delete('/:id/leave', authenticateToken, function () {\n  var _ref4 = _asyncToGenerator(function* (req, res) {\n    try {\n      var sportId = req.params.id;\n      var userId = req.user.userId;\n      var userSport = yield prisma.userSport.findUnique({\n        where: {\n          userId_sportId: {\n            userId: userId,\n            sportId: sportId\n          }\n        }\n      });\n      if (!userSport) {\n        return res.status(404).json({\n          success: false,\n          message: 'Você não está inscrito neste esporte'\n        });\n      }\n      yield prisma.userSport.update({\n        where: {\n          id: userSport.id\n        },\n        data: {\n          isActive: false\n        }\n      });\n      res.json({\n        success: true,\n        message: 'Inscrição removida com sucesso'\n      });\n    } catch (error) {\n      console.error('Erro ao sair do esporte:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  });\n  return function (_x7, _x8) {\n    return _ref4.apply(this, arguments);\n  };\n}());\nrouter.get('/user/my-sports', authenticateToken, function () {\n  var _ref5 = _asyncToGenerator(function* (req, res) {\n    try {\n      var userId = req.user.userId;\n      var userSports = yield prisma.userSport.findMany({\n        where: {\n          userId: userId,\n          isActive: true\n        },\n        include: {\n          sport: {\n            select: {\n              id: true,\n              name: true,\n              description: true,\n              icon: true,\n              color: true\n            }\n          }\n        },\n        orderBy: {\n          createdAt: 'desc'\n        }\n      });\n      res.json({\n        success: true,\n        data: {\n          userSports: userSports\n        }\n      });\n    } catch (error) {\n      console.error('Erro ao buscar esportes do usuário:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  });\n  return function (_x9, _x0) {\n    return _ref5.apply(this, arguments);\n  };\n}());\nrouter.get('/:id/ranking', function () {\n  var _ref6 = _asyncToGenerator(function* (req, res) {\n    try {\n      var sportId = req.params.id;\n      var _req$query = req.query,\n        _req$query$limit = _req$query.limit,\n        limit = _req$query$limit === void 0 ? 10 : _req$query$limit,\n        _req$query$offset = _req$query.offset,\n        offset = _req$query$offset === void 0 ? 0 : _req$query$offset;\n      var sport = yield prisma.sport.findUnique({\n        where: {\n          id: sportId\n        }\n      });\n      if (!sport) {\n        return res.status(404).json({\n          success: false,\n          message: 'Esporte não encontrado'\n        });\n      }\n      var rankings = yield prisma.userScore.findMany({\n        where: {\n          sportId: sportId\n        },\n        include: {\n          user: {\n            select: {\n              id: true,\n              name: true,\n              avatar: true\n            }\n          }\n        },\n        orderBy: [{\n          score: 'desc'\n        }, {\n          level: 'desc'\n        }, {\n          createdAt: 'asc'\n        }],\n        take: parseInt(limit),\n        skip: parseInt(offset)\n      });\n      var totalCount = yield prisma.userScore.count({\n        where: {\n          sportId: sportId\n        }\n      });\n      res.json({\n        success: true,\n        data: {\n          sport: {\n            id: sport.id,\n            name: sport.name,\n            icon: sport.icon,\n            color: sport.color\n          },\n          rankings: rankings,\n          pagination: {\n            total: totalCount,\n            limit: parseInt(limit),\n            offset: parseInt(offset),\n            hasMore: parseInt(offset) + parseInt(limit) < totalCount\n          }\n        }\n      });\n    } catch (error) {\n      console.error('Erro ao buscar ranking:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  });\n  return function (_x1, _x10) {\n    return _ref6.apply(this, arguments);\n  };\n}());\nmodule.exports = router;","map":{"version":3,"names":["express","require","prisma","authenticateToken","req","res","next","authHeader","headers","token","split","status","json","success","message","jwt","verify","process","env","JWT_SECRET","err","user","router","Router","get","_ref","_asyncToGenerator","sports","sport","findMany","where","isActive","select","id","name","description","icon","color","_count","contents","userSports","orderBy","data","error","console","_x","_x2","apply","arguments","_ref2","params","findUnique","include","title","type","difficulty","duration","imageUrl","_x3","_x4","post","_ref3","sportId","userId","existingUserSport","userSport","userId_sportId","update","create","_x5","_x6","delete","_ref4","_x7","_x8","_ref5","createdAt","_x9","_x0","_ref6","_req$query","query","_req$query$limit","limit","_req$query$offset","offset","rankings","userScore","avatar","score","level","take","parseInt","skip","totalCount","count","pagination","total","hasMore","_x1","_x10","module","exports"],"sources":["C:/Users/lukag/OneDrive/Área de Trabalho/Muvz_App/api/routes/sports.js"],"sourcesContent":["const express = require('express');\r\nconst prisma = require('../prisma');\r\n// Middleware de autenticação\r\nconst authenticateToken = (req, res, next) => {\r\n  const authHeader = req.headers['authorization'];\r\n  const token = authHeader && authHeader.split(' ')[1];\r\n\r\n  if (!token) {\r\n    return res.status(401).json({\r\n      success: false,\r\n      message: 'Token de acesso necessário'\r\n    });\r\n  }\r\n\r\n  const jwt = require('jsonwebtoken');\r\n  jwt.verify(token, process.env.JWT_SECRET || 'fallback-secret', (err, user) => {\r\n    if (err) {\r\n      return res.status(403).json({\r\n        success: false,\r\n        message: 'Token inválido ou expirado'\r\n      });\r\n    }\r\n    req.user = user;\r\n    next();\r\n  });\r\n};\r\n\r\nconst router = express.Router();\r\n\r\n// Buscar todos os esportes\r\nrouter.get('/', async (req, res) => {\r\n  try {\r\n    const sports = await prisma.sport.findMany({\r\n      where: { isActive: true },\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        description: true,\r\n        icon: true,\r\n        color: true,\r\n        _count: {\r\n          select: {\r\n            contents: true,\r\n            userSports: true\r\n          }\r\n        }\r\n      },\r\n      orderBy: { name: 'asc' }\r\n    });\r\n\r\n    res.json({\r\n      success: true,\r\n      data: { sports }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Erro ao buscar esportes:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Erro interno do servidor'\r\n    });\r\n  }\r\n});\r\n\r\n// Buscar esporte por ID\r\nrouter.get('/:id', async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n\r\n    const sport = await prisma.sport.findUnique({\r\n      where: { id },\r\n      include: {\r\n        contents: {\r\n          where: { isActive: true },\r\n          select: {\r\n            id: true,\r\n            title: true,\r\n            description: true,\r\n            type: true,\r\n            difficulty: true,\r\n            duration: true,\r\n            imageUrl: true\r\n          },\r\n          orderBy: [\r\n            { type: 'asc' },\r\n            { difficulty: 'asc' }\r\n          ]\r\n        },\r\n        _count: {\r\n          select: {\r\n            userSports: true,\r\n            contents: true\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    if (!sport) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'Esporte não encontrado'\r\n      });\r\n    }\r\n\r\n    res.json({\r\n      success: true,\r\n      data: { sport }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Erro ao buscar esporte:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Erro interno do servidor'\r\n    });\r\n  }\r\n});\r\n\r\n// Adicionar esporte ao usuário\r\nrouter.post('/:id/join', authenticateToken, async (req, res) => {\r\n  try {\r\n    const { id: sportId } = req.params;\r\n    const userId = req.user.userId;\r\n\r\n    // Verificar se o esporte existe\r\n    const sport = await prisma.sport.findUnique({\r\n      where: { id: sportId }\r\n    });\r\n\r\n    if (!sport) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'Esporte não encontrado'\r\n      });\r\n    }\r\n\r\n    // Verificar se o usuário já está inscrito\r\n    const existingUserSport = await prisma.userSport.findUnique({\r\n      where: {\r\n        userId_sportId: {\r\n          userId,\r\n          sportId\r\n        }\r\n      }\r\n    });\r\n\r\n    if (existingUserSport) {\r\n      if (existingUserSport.isActive) {\r\n        return res.status(409).json({\r\n          success: false,\r\n          message: 'Você já está inscrito neste esporte'\r\n        });\r\n      } else {\r\n        // Reativar inscrição\r\n        await prisma.userSport.update({\r\n          where: { id: existingUserSport.id },\r\n          data: { isActive: true }\r\n        });\r\n\r\n        return res.json({\r\n          success: true,\r\n          message: 'Inscrição reativada com sucesso'\r\n        });\r\n      }\r\n    }\r\n\r\n    // Criar nova inscrição\r\n    await prisma.userSport.create({\r\n      data: {\r\n        userId,\r\n        sportId\r\n      }\r\n    });\r\n\r\n    res.json({\r\n      success: true,\r\n      message: 'Inscrito no esporte com sucesso'\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Erro ao se inscrever no esporte:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Erro interno do servidor'\r\n    });\r\n  }\r\n});\r\n\r\n// Remover esporte do usuário\r\nrouter.delete('/:id/leave', authenticateToken, async (req, res) => {\r\n  try {\r\n    const { id: sportId } = req.params;\r\n    const userId = req.user.userId;\r\n\r\n    const userSport = await prisma.userSport.findUnique({\r\n      where: {\r\n        userId_sportId: {\r\n          userId,\r\n          sportId\r\n        }\r\n      }\r\n    });\r\n\r\n    if (!userSport) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'Você não está inscrito neste esporte'\r\n      });\r\n    }\r\n\r\n    // Desativar inscrição ao invés de deletar\r\n    await prisma.userSport.update({\r\n      where: { id: userSport.id },\r\n      data: { isActive: false }\r\n    });\r\n\r\n    res.json({\r\n      success: true,\r\n      message: 'Inscrição removida com sucesso'\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Erro ao sair do esporte:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Erro interno do servidor'\r\n    });\r\n  }\r\n});\r\n\r\n// Buscar esportes do usuário\r\nrouter.get('/user/my-sports', authenticateToken, async (req, res) => {\r\n  try {\r\n    const userId = req.user.userId;\r\n\r\n    const userSports = await prisma.userSport.findMany({\r\n      where: { \r\n        userId,\r\n        isActive: true\r\n      },\r\n      include: {\r\n        sport: {\r\n          select: {\r\n            id: true,\r\n            name: true,\r\n            description: true,\r\n            icon: true,\r\n            color: true\r\n          }\r\n        }\r\n      },\r\n      orderBy: { createdAt: 'desc' }\r\n    });\r\n\r\n    res.json({\r\n      success: true,\r\n      data: { userSports }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Erro ao buscar esportes do usuário:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Erro interno do servidor'\r\n    });\r\n  }\r\n});\r\n\r\n// Buscar ranking de um esporte\r\nrouter.get('/:id/ranking', async (req, res) => {\r\n  try {\r\n    const { id: sportId } = req.params;\r\n    const { limit = 10, offset = 0 } = req.query;\r\n\r\n    // Verificar se o esporte existe\r\n    const sport = await prisma.sport.findUnique({\r\n      where: { id: sportId }\r\n    });\r\n\r\n    if (!sport) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'Esporte não encontrado'\r\n      });\r\n    }\r\n\r\n    const rankings = await prisma.userScore.findMany({\r\n      where: { sportId },\r\n      include: {\r\n        user: {\r\n          select: {\r\n            id: true,\r\n            name: true,\r\n            avatar: true\r\n          }\r\n        }\r\n      },\r\n      orderBy: [\r\n        { score: 'desc' },\r\n        { level: 'desc' },\r\n        { createdAt: 'asc' }\r\n      ],\r\n      take: parseInt(limit),\r\n      skip: parseInt(offset)\r\n    });\r\n\r\n    const totalCount = await prisma.userScore.count({\r\n      where: { sportId }\r\n    });\r\n\r\n    res.json({\r\n      success: true,\r\n      data: {\r\n        sport: {\r\n          id: sport.id,\r\n          name: sport.name,\r\n          icon: sport.icon,\r\n          color: sport.color\r\n        },\r\n        rankings,\r\n        pagination: {\r\n          total: totalCount,\r\n          limit: parseInt(limit),\r\n          offset: parseInt(offset),\r\n          hasMore: (parseInt(offset) + parseInt(limit)) < totalCount\r\n        }\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Erro ao buscar ranking:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Erro interno do servidor'\r\n    });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"],"mappings":";AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,IAAMC,MAAM,GAAGD,OAAO,YAAY,CAAC;AAEnC,IAAME,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAIC,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAK;EAC5C,IAAMC,UAAU,GAAGH,GAAG,CAACI,OAAO,CAAC,eAAe,CAAC;EAC/C,IAAMC,KAAK,GAAGF,UAAU,IAAIA,UAAU,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAEpD,IAAI,CAACD,KAAK,EAAE;IACV,OAAOJ,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BC,OAAO,EAAE,KAAK;MACdC,OAAO,EAAE;IACX,CAAC,CAAC;EACJ;EAEA,IAAMC,GAAG,GAAGd,OAAO,CAAC,cAAc,CAAC;EACnCc,GAAG,CAACC,MAAM,CAACP,KAAK,EAAEQ,OAAO,CAACC,GAAG,CAACC,UAAU,IAAI,iBAAiB,EAAE,UAACC,GAAG,EAAEC,IAAI,EAAK;IAC5E,IAAID,GAAG,EAAE;MACP,OAAOf,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ;IACAV,GAAG,CAACiB,IAAI,GAAGA,IAAI;IACff,IAAI,CAAC,CAAC;EACR,CAAC,CAAC;AACJ,CAAC;AAED,IAAMgB,MAAM,GAAGtB,OAAO,CAACuB,MAAM,CAAC,CAAC;AAG/BD,MAAM,CAACE,GAAG,CAAC,GAAG;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAE,WAAOtB,GAAG,EAAEC,GAAG,EAAK;IAClC,IAAI;MACF,IAAMsB,MAAM,SAASzB,MAAM,CAAC0B,KAAK,CAACC,QAAQ,CAAC;QACzCC,KAAK,EAAE;UAAEC,QAAQ,EAAE;QAAK,CAAC;QACzBC,MAAM,EAAE;UACNC,EAAE,EAAE,IAAI;UACRC,IAAI,EAAE,IAAI;UACVC,WAAW,EAAE,IAAI;UACjBC,IAAI,EAAE,IAAI;UACVC,KAAK,EAAE,IAAI;UACXC,MAAM,EAAE;YACNN,MAAM,EAAE;cACNO,QAAQ,EAAE,IAAI;cACdC,UAAU,EAAE;YACd;UACF;QACF,CAAC;QACDC,OAAO,EAAE;UAAEP,IAAI,EAAE;QAAM;MACzB,CAAC,CAAC;MAEF7B,GAAG,CAACO,IAAI,CAAC;QACPC,OAAO,EAAE,IAAI;QACb6B,IAAI,EAAE;UAAEf,MAAM,EAANA;QAAO;MACjB,CAAC,CAAC;IAEJ,CAAC,CAAC,OAAOgB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChDtC,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QACnBC,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ;EACF,CAAC;EAAA,iBAAA+B,EAAA,EAAAC,GAAA;IAAA,OAAArB,IAAA,CAAAsB,KAAA,OAAAC,SAAA;EAAA;AAAA,IAAC;AAGF1B,MAAM,CAACE,GAAG,CAAC,MAAM;EAAA,IAAAyB,KAAA,GAAAvB,iBAAA,CAAE,WAAOtB,GAAG,EAAEC,GAAG,EAAK;IACrC,IAAI;MACF,IAAQ4B,EAAE,GAAK7B,GAAG,CAAC8C,MAAM,CAAjBjB,EAAE;MAEV,IAAML,KAAK,SAAS1B,MAAM,CAAC0B,KAAK,CAACuB,UAAU,CAAC;QAC1CrB,KAAK,EAAE;UAAEG,EAAE,EAAFA;QAAG,CAAC;QACbmB,OAAO,EAAE;UACPb,QAAQ,EAAE;YACRT,KAAK,EAAE;cAAEC,QAAQ,EAAE;YAAK,CAAC;YACzBC,MAAM,EAAE;cACNC,EAAE,EAAE,IAAI;cACRoB,KAAK,EAAE,IAAI;cACXlB,WAAW,EAAE,IAAI;cACjBmB,IAAI,EAAE,IAAI;cACVC,UAAU,EAAE,IAAI;cAChBC,QAAQ,EAAE,IAAI;cACdC,QAAQ,EAAE;YACZ,CAAC;YACDhB,OAAO,EAAE,CACP;cAAEa,IAAI,EAAE;YAAM,CAAC,EACf;cAAEC,UAAU,EAAE;YAAM,CAAC;UAEzB,CAAC;UACDjB,MAAM,EAAE;YACNN,MAAM,EAAE;cACNQ,UAAU,EAAE,IAAI;cAChBD,QAAQ,EAAE;YACZ;UACF;QACF;MACF,CAAC,CAAC;MAEF,IAAI,CAACX,KAAK,EAAE;QACV,OAAOvB,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UAC1BC,OAAO,EAAE,KAAK;UACdC,OAAO,EAAE;QACX,CAAC,CAAC;MACJ;MAEAT,GAAG,CAACO,IAAI,CAAC;QACPC,OAAO,EAAE,IAAI;QACb6B,IAAI,EAAE;UAAEd,KAAK,EAALA;QAAM;MAChB,CAAC,CAAC;IAEJ,CAAC,CAAC,OAAOe,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/CtC,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QACnBC,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ;EACF,CAAC;EAAA,iBAAA4C,GAAA,EAAAC,GAAA;IAAA,OAAAV,KAAA,CAAAF,KAAA,OAAAC,SAAA;EAAA;AAAA,IAAC;AAGF1B,MAAM,CAACsC,IAAI,CAAC,WAAW,EAAEzD,iBAAiB;EAAA,IAAA0D,KAAA,GAAAnC,iBAAA,CAAE,WAAOtB,GAAG,EAAEC,GAAG,EAAK;IAC9D,IAAI;MACF,IAAYyD,OAAO,GAAK1D,GAAG,CAAC8C,MAAM,CAA1BjB,EAAE;MACV,IAAM8B,MAAM,GAAG3D,GAAG,CAACiB,IAAI,CAAC0C,MAAM;MAG9B,IAAMnC,KAAK,SAAS1B,MAAM,CAAC0B,KAAK,CAACuB,UAAU,CAAC;QAC1CrB,KAAK,EAAE;UAAEG,EAAE,EAAE6B;QAAQ;MACvB,CAAC,CAAC;MAEF,IAAI,CAAClC,KAAK,EAAE;QACV,OAAOvB,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UAC1BC,OAAO,EAAE,KAAK;UACdC,OAAO,EAAE;QACX,CAAC,CAAC;MACJ;MAGA,IAAMkD,iBAAiB,SAAS9D,MAAM,CAAC+D,SAAS,CAACd,UAAU,CAAC;QAC1DrB,KAAK,EAAE;UACLoC,cAAc,EAAE;YACdH,MAAM,EAANA,MAAM;YACND,OAAO,EAAPA;UACF;QACF;MACF,CAAC,CAAC;MAEF,IAAIE,iBAAiB,EAAE;QACrB,IAAIA,iBAAiB,CAACjC,QAAQ,EAAE;UAC9B,OAAO1B,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;YAC1BC,OAAO,EAAE,KAAK;YACdC,OAAO,EAAE;UACX,CAAC,CAAC;QACJ,CAAC,MAAM;UAEL,MAAMZ,MAAM,CAAC+D,SAAS,CAACE,MAAM,CAAC;YAC5BrC,KAAK,EAAE;cAAEG,EAAE,EAAE+B,iBAAiB,CAAC/B;YAAG,CAAC;YACnCS,IAAI,EAAE;cAAEX,QAAQ,EAAE;YAAK;UACzB,CAAC,CAAC;UAEF,OAAO1B,GAAG,CAACO,IAAI,CAAC;YACdC,OAAO,EAAE,IAAI;YACbC,OAAO,EAAE;UACX,CAAC,CAAC;QACJ;MACF;MAGA,MAAMZ,MAAM,CAAC+D,SAAS,CAACG,MAAM,CAAC;QAC5B1B,IAAI,EAAE;UACJqB,MAAM,EAANA,MAAM;UACND,OAAO,EAAPA;QACF;MACF,CAAC,CAAC;MAEFzD,GAAG,CAACO,IAAI,CAAC;QACPC,OAAO,EAAE,IAAI;QACbC,OAAO,EAAE;MACX,CAAC,CAAC;IAEJ,CAAC,CAAC,OAAO6B,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxDtC,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QACnBC,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ;EACF,CAAC;EAAA,iBAAAuD,GAAA,EAAAC,GAAA;IAAA,OAAAT,KAAA,CAAAd,KAAA,OAAAC,SAAA;EAAA;AAAA,IAAC;AAGF1B,MAAM,CAACiD,MAAM,CAAC,YAAY,EAAEpE,iBAAiB;EAAA,IAAAqE,KAAA,GAAA9C,iBAAA,CAAE,WAAOtB,GAAG,EAAEC,GAAG,EAAK;IACjE,IAAI;MACF,IAAYyD,OAAO,GAAK1D,GAAG,CAAC8C,MAAM,CAA1BjB,EAAE;MACV,IAAM8B,MAAM,GAAG3D,GAAG,CAACiB,IAAI,CAAC0C,MAAM;MAE9B,IAAME,SAAS,SAAS/D,MAAM,CAAC+D,SAAS,CAACd,UAAU,CAAC;QAClDrB,KAAK,EAAE;UACLoC,cAAc,EAAE;YACdH,MAAM,EAANA,MAAM;YACND,OAAO,EAAPA;UACF;QACF;MACF,CAAC,CAAC;MAEF,IAAI,CAACG,SAAS,EAAE;QACd,OAAO5D,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UAC1BC,OAAO,EAAE,KAAK;UACdC,OAAO,EAAE;QACX,CAAC,CAAC;MACJ;MAGA,MAAMZ,MAAM,CAAC+D,SAAS,CAACE,MAAM,CAAC;QAC5BrC,KAAK,EAAE;UAAEG,EAAE,EAAEgC,SAAS,CAAChC;QAAG,CAAC;QAC3BS,IAAI,EAAE;UAAEX,QAAQ,EAAE;QAAM;MAC1B,CAAC,CAAC;MAEF1B,GAAG,CAACO,IAAI,CAAC;QACPC,OAAO,EAAE,IAAI;QACbC,OAAO,EAAE;MACX,CAAC,CAAC;IAEJ,CAAC,CAAC,OAAO6B,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChDtC,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QACnBC,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ;EACF,CAAC;EAAA,iBAAA2D,GAAA,EAAAC,GAAA;IAAA,OAAAF,KAAA,CAAAzB,KAAA,OAAAC,SAAA;EAAA;AAAA,IAAC;AAGF1B,MAAM,CAACE,GAAG,CAAC,iBAAiB,EAAErB,iBAAiB;EAAA,IAAAwE,KAAA,GAAAjD,iBAAA,CAAE,WAAOtB,GAAG,EAAEC,GAAG,EAAK;IACnE,IAAI;MACF,IAAM0D,MAAM,GAAG3D,GAAG,CAACiB,IAAI,CAAC0C,MAAM;MAE9B,IAAMvB,UAAU,SAAStC,MAAM,CAAC+D,SAAS,CAACpC,QAAQ,CAAC;QACjDC,KAAK,EAAE;UACLiC,MAAM,EAANA,MAAM;UACNhC,QAAQ,EAAE;QACZ,CAAC;QACDqB,OAAO,EAAE;UACPxB,KAAK,EAAE;YACLI,MAAM,EAAE;cACNC,EAAE,EAAE,IAAI;cACRC,IAAI,EAAE,IAAI;cACVC,WAAW,EAAE,IAAI;cACjBC,IAAI,EAAE,IAAI;cACVC,KAAK,EAAE;YACT;UACF;QACF,CAAC;QACDI,OAAO,EAAE;UAAEmC,SAAS,EAAE;QAAO;MAC/B,CAAC,CAAC;MAEFvE,GAAG,CAACO,IAAI,CAAC;QACPC,OAAO,EAAE,IAAI;QACb6B,IAAI,EAAE;UAAEF,UAAU,EAAVA;QAAW;MACrB,CAAC,CAAC;IAEJ,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC3DtC,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QACnBC,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ;EACF,CAAC;EAAA,iBAAA+D,GAAA,EAAAC,GAAA;IAAA,OAAAH,KAAA,CAAA5B,KAAA,OAAAC,SAAA;EAAA;AAAA,IAAC;AAGF1B,MAAM,CAACE,GAAG,CAAC,cAAc;EAAA,IAAAuD,KAAA,GAAArD,iBAAA,CAAE,WAAOtB,GAAG,EAAEC,GAAG,EAAK;IAC7C,IAAI;MACF,IAAYyD,OAAO,GAAK1D,GAAG,CAAC8C,MAAM,CAA1BjB,EAAE;MACV,IAAA+C,UAAA,GAAmC5E,GAAG,CAAC6E,KAAK;QAAAC,gBAAA,GAAAF,UAAA,CAApCG,KAAK;QAALA,KAAK,GAAAD,gBAAA,cAAG,EAAE,GAAAA,gBAAA;QAAAE,iBAAA,GAAAJ,UAAA,CAAEK,MAAM;QAANA,MAAM,GAAAD,iBAAA,cAAG,CAAC,GAAAA,iBAAA;MAG9B,IAAMxD,KAAK,SAAS1B,MAAM,CAAC0B,KAAK,CAACuB,UAAU,CAAC;QAC1CrB,KAAK,EAAE;UAAEG,EAAE,EAAE6B;QAAQ;MACvB,CAAC,CAAC;MAEF,IAAI,CAAClC,KAAK,EAAE;QACV,OAAOvB,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UAC1BC,OAAO,EAAE,KAAK;UACdC,OAAO,EAAE;QACX,CAAC,CAAC;MACJ;MAEA,IAAMwE,QAAQ,SAASpF,MAAM,CAACqF,SAAS,CAAC1D,QAAQ,CAAC;QAC/CC,KAAK,EAAE;UAAEgC,OAAO,EAAPA;QAAQ,CAAC;QAClBV,OAAO,EAAE;UACP/B,IAAI,EAAE;YACJW,MAAM,EAAE;cACNC,EAAE,EAAE,IAAI;cACRC,IAAI,EAAE,IAAI;cACVsD,MAAM,EAAE;YACV;UACF;QACF,CAAC;QACD/C,OAAO,EAAE,CACP;UAAEgD,KAAK,EAAE;QAAO,CAAC,EACjB;UAAEC,KAAK,EAAE;QAAO,CAAC,EACjB;UAAEd,SAAS,EAAE;QAAM,CAAC,CACrB;QACDe,IAAI,EAAEC,QAAQ,CAACT,KAAK,CAAC;QACrBU,IAAI,EAAED,QAAQ,CAACP,MAAM;MACvB,CAAC,CAAC;MAEF,IAAMS,UAAU,SAAS5F,MAAM,CAACqF,SAAS,CAACQ,KAAK,CAAC;QAC9CjE,KAAK,EAAE;UAAEgC,OAAO,EAAPA;QAAQ;MACnB,CAAC,CAAC;MAEFzD,GAAG,CAACO,IAAI,CAAC;QACPC,OAAO,EAAE,IAAI;QACb6B,IAAI,EAAE;UACJd,KAAK,EAAE;YACLK,EAAE,EAAEL,KAAK,CAACK,EAAE;YACZC,IAAI,EAAEN,KAAK,CAACM,IAAI;YAChBE,IAAI,EAAER,KAAK,CAACQ,IAAI;YAChBC,KAAK,EAAET,KAAK,CAACS;UACf,CAAC;UACDiD,QAAQ,EAARA,QAAQ;UACRU,UAAU,EAAE;YACVC,KAAK,EAAEH,UAAU;YACjBX,KAAK,EAAES,QAAQ,CAACT,KAAK,CAAC;YACtBE,MAAM,EAAEO,QAAQ,CAACP,MAAM,CAAC;YACxBa,OAAO,EAAGN,QAAQ,CAACP,MAAM,CAAC,GAAGO,QAAQ,CAACT,KAAK,CAAC,GAAIW;UAClD;QACF;MACF,CAAC,CAAC;IAEJ,CAAC,CAAC,OAAOnD,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/CtC,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QACnBC,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ;EACF,CAAC;EAAA,iBAAAqF,GAAA,EAAAC,IAAA;IAAA,OAAArB,KAAA,CAAAhC,KAAA,OAAAC,SAAA;EAAA;AAAA,IAAC;AAEFqD,MAAM,CAACC,OAAO,GAAGhF,MAAM","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}