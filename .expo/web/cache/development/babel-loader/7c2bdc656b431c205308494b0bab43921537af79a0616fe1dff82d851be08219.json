{"ast":null,"code":"var _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar express = require('express');\nvar prisma = require(\"../prisma\");\nvar authenticateToken = function authenticateToken(req, res, next) {\n  var authHeader = req.headers['authorization'];\n  var token = authHeader && authHeader.split(' ')[1];\n  if (!token) {\n    return res.status(401).json({\n      success: false,\n      message: 'Token de acesso necessário'\n    });\n  }\n  var jwt = require('jsonwebtoken');\n  jwt.verify(token, process.env.JWT_SECRET || 'fallback-secret', function (err, user) {\n    if (err) {\n      return res.status(403).json({\n        success: false,\n        message: 'Token inválido ou expirado'\n      });\n    }\n    req.user = user;\n    next();\n  });\n};\nvar router = express.Router();\nrouter.post('/', authenticateToken, function () {\n  var _ref = _asyncToGenerator(function* (req, res) {\n    try {\n      var _req$body = req.body,\n        sportId = _req$body.sportId,\n        score = _req$body.score,\n        level = _req$body.level;\n      var userId = req.user.userId;\n      if (!sportId || score === undefined || level === undefined) {\n        return res.status(400).json({\n          success: false,\n          message: 'SportId, score e level são obrigatórios'\n        });\n      }\n      if (score < 0 || level < 1) {\n        return res.status(400).json({\n          success: false,\n          message: 'Score deve ser >= 0 e level >= 1'\n        });\n      }\n      var sport = yield prisma.sport.findUnique({\n        where: {\n          id: sportId\n        }\n      });\n      if (!sport) {\n        return res.status(404).json({\n          success: false,\n          message: 'Esporte não encontrado'\n        });\n      }\n      var userSport = yield prisma.userSport.findFirst({\n        where: {\n          userId: userId,\n          sportId: sportId,\n          isActive: true\n        }\n      });\n      if (!userSport) {\n        return res.status(403).json({\n          success: false,\n          message: 'Você precisa estar inscrito no esporte para registrar pontuação'\n        });\n      }\n      var existingScore = yield prisma.userScore.findFirst({\n        where: {\n          userId: userId,\n          sportId: sportId\n        },\n        orderBy: {\n          createdAt: 'desc'\n        }\n      });\n      if (existingScore && score <= existingScore.score) {\n        return res.json({\n          success: true,\n          message: 'Pontuação não foi atualizada (não é maior que a anterior)',\n          data: {\n            userScore: existingScore\n          }\n        });\n      }\n      var userScore = yield prisma.userScore.upsert({\n        where: {\n          userId_sportId: {\n            userId: userId,\n            sportId: sportId\n          }\n        },\n        update: {\n          score: score,\n          level: level\n        },\n        create: {\n          userId: userId,\n          sportId: sportId,\n          score: score,\n          level: level\n        },\n        include: {\n          sport: {\n            select: {\n              id: true,\n              name: true,\n              icon: true,\n              color: true\n            }\n          }\n        }\n      });\n      res.json({\n        success: true,\n        message: 'Pontuação registrada com sucesso',\n        data: {\n          userScore: userScore\n        }\n      });\n    } catch (error) {\n      console.error('Erro ao registrar pontuação:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  });\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}());\nrouter.get('/user', authenticateToken, function () {\n  var _ref2 = _asyncToGenerator(function* (req, res) {\n    try {\n      var userId = req.user.userId;\n      var _req$query = req.query,\n        _req$query$limit = _req$query.limit,\n        limit = _req$query$limit === void 0 ? 20 : _req$query$limit,\n        _req$query$offset = _req$query.offset,\n        offset = _req$query$offset === void 0 ? 0 : _req$query$offset;\n      var userScores = yield prisma.userScore.findMany({\n        where: {\n          userId: userId\n        },\n        include: {\n          sport: {\n            select: {\n              id: true,\n              name: true,\n              icon: true,\n              color: true\n            }\n          }\n        },\n        orderBy: {\n          score: 'desc'\n        },\n        take: parseInt(limit),\n        skip: parseInt(offset)\n      });\n      var totalCount = yield prisma.userScore.count({\n        where: {\n          userId: userId\n        }\n      });\n      res.json({\n        success: true,\n        data: {\n          userScores: userScores,\n          pagination: {\n            total: totalCount,\n            limit: parseInt(limit),\n            offset: parseInt(offset),\n            hasMore: parseInt(offset) + parseInt(limit) < totalCount\n          }\n        }\n      });\n    } catch (error) {\n      console.error('Erro ao buscar pontuações do usuário:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  });\n  return function (_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nrouter.get('/user/:sportId', authenticateToken, function () {\n  var _ref3 = _asyncToGenerator(function* (req, res) {\n    try {\n      var sportId = req.params.sportId;\n      var userId = req.user.userId;\n      var userScore = yield prisma.userScore.findFirst({\n        where: {\n          userId: userId,\n          sportId: sportId\n        },\n        include: {\n          sport: {\n            select: {\n              id: true,\n              name: true,\n              icon: true,\n              color: true\n            }\n          }\n        },\n        orderBy: {\n          createdAt: 'desc'\n        }\n      });\n      if (!userScore) {\n        return res.status(404).json({\n          success: false,\n          message: 'Pontuação não encontrada para este esporte'\n        });\n      }\n      res.json({\n        success: true,\n        data: {\n          userScore: userScore\n        }\n      });\n    } catch (error) {\n      console.error('Erro ao buscar pontuação específica:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  });\n  return function (_x5, _x6) {\n    return _ref3.apply(this, arguments);\n  };\n}());\nrouter.get('/ranking', function () {\n  var _ref4 = _asyncToGenerator(function* (req, res) {\n    try {\n      var _req$query2 = req.query,\n        sportId = _req$query2.sportId,\n        _req$query2$limit = _req$query2.limit,\n        limit = _req$query2$limit === void 0 ? 50 : _req$query2$limit,\n        _req$query2$offset = _req$query2.offset,\n        offset = _req$query2$offset === void 0 ? 0 : _req$query2$offset;\n      var whereClause = sportId ? {\n        sportId: sportId\n      } : {};\n      var rankings = yield prisma.userScore.findMany({\n        where: whereClause,\n        include: {\n          user: {\n            select: {\n              id: true,\n              name: true,\n              avatar: true\n            }\n          },\n          sport: {\n            select: {\n              id: true,\n              name: true,\n              icon: true,\n              color: true\n            }\n          }\n        },\n        orderBy: [{\n          score: 'desc'\n        }, {\n          level: 'desc'\n        }, {\n          createdAt: 'asc'\n        }],\n        take: parseInt(limit),\n        skip: parseInt(offset)\n      });\n      var totalCount = yield prisma.userScore.count({\n        where: whereClause\n      });\n      res.json({\n        success: true,\n        data: {\n          rankings: rankings,\n          pagination: {\n            total: totalCount,\n            limit: parseInt(limit),\n            offset: parseInt(offset),\n            hasMore: parseInt(offset) + parseInt(limit) < totalCount\n          }\n        }\n      });\n    } catch (error) {\n      console.error('Erro ao buscar ranking:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  });\n  return function (_x7, _x8) {\n    return _ref4.apply(this, arguments);\n  };\n}());\nrouter.get('/stats', authenticateToken, function () {\n  var _ref5 = _asyncToGenerator(function* (req, res) {\n    try {\n      var userId = req.user.userId;\n      var _yield$Promise$all = yield Promise.all([prisma.userScore.count({\n          where: {\n            userId: userId\n          }\n        }), prisma.userScore.aggregate({\n          where: {\n            userId: userId\n          },\n          _avg: {\n            score: true\n          }\n        }), prisma.userScore.findFirst({\n          where: {\n            userId: userId\n          },\n          orderBy: {\n            score: 'desc'\n          },\n          include: {\n            sport: {\n              select: {\n                name: true,\n                icon: true,\n                color: true\n              }\n            }\n          }\n        }), prisma.userScore.aggregate({\n          where: {\n            userId: userId\n          },\n          _sum: {\n            level: true\n          }\n        }), prisma.userScore.groupBy({\n          by: ['sportId'],\n          where: {\n            userId: userId\n          },\n          _max: {\n            score: true\n          },\n          _sum: {\n            level: true\n          },\n          orderBy: {\n            _max: {\n              score: 'desc'\n            }\n          }\n        })]),\n        _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 5),\n        totalScores = _yield$Promise$all2[0],\n        averageScore = _yield$Promise$all2[1],\n        highestScore = _yield$Promise$all2[2],\n        totalLevels = _yield$Promise$all2[3],\n        scoresBySport = _yield$Promise$all2[4];\n      res.json({\n        success: true,\n        data: {\n          totalScores: totalScores,\n          averageScore: averageScore._avg.score || 0,\n          highestScore: highestScore || null,\n          totalLevels: totalLevels._sum.level || 0,\n          scoresBySport: scoresBySport\n        }\n      });\n    } catch (error) {\n      console.error('Erro ao buscar estatísticas:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  });\n  return function (_x9, _x0) {\n    return _ref5.apply(this, arguments);\n  };\n}());\nmodule.exports = router;","map":{"version":3,"names":["express","require","prisma","authenticateToken","req","res","next","authHeader","headers","token","split","status","json","success","message","jwt","verify","process","env","JWT_SECRET","err","user","router","Router","post","_ref","_asyncToGenerator","_req$body","body","sportId","score","level","userId","undefined","sport","findUnique","where","id","userSport","findFirst","isActive","existingScore","userScore","orderBy","createdAt","data","upsert","userId_sportId","update","create","include","select","name","icon","color","error","console","_x","_x2","apply","arguments","get","_ref2","_req$query","query","_req$query$limit","limit","_req$query$offset","offset","userScores","findMany","take","parseInt","skip","totalCount","count","pagination","total","hasMore","_x3","_x4","_ref3","params","_x5","_x6","_ref4","_req$query2","_req$query2$limit","_req$query2$offset","whereClause","rankings","avatar","_x7","_x8","_ref5","_yield$Promise$all","Promise","all","aggregate","_avg","_sum","groupBy","by","_max","_yield$Promise$all2","_slicedToArray","totalScores","averageScore","highestScore","totalLevels","scoresBySport","_x9","_x0","module","exports"],"sources":["C:/Users/lukag/OneDrive/Área de Trabalho/Muvz_App/api/routes/scores.js"],"sourcesContent":["const express = require('express');\r\nconst prisma = require('../prisma');\r\n// Middleware de autenticação\r\nconst authenticateToken = (req, res, next) => {\r\n  const authHeader = req.headers['authorization'];\r\n  const token = authHeader && authHeader.split(' ')[1];\r\n\r\n  if (!token) {\r\n    return res.status(401).json({\r\n      success: false,\r\n      message: 'Token de acesso necessário'\r\n    });\r\n  }\r\n\r\n  const jwt = require('jsonwebtoken');\r\n  jwt.verify(token, process.env.JWT_SECRET || 'fallback-secret', (err, user) => {\r\n    if (err) {\r\n      return res.status(403).json({\r\n        success: false,\r\n        message: 'Token inválido ou expirado'\r\n      });\r\n    }\r\n    req.user = user;\r\n    next();\r\n  });\r\n};\r\n\r\nconst router = express.Router();\r\n\r\n// Registrar pontuação do usuário\r\nrouter.post('/', authenticateToken, async (req, res) => {\r\n  try {\r\n    const { sportId, score, level } = req.body;\r\n    const userId = req.user.userId;\r\n\r\n    if (!sportId || score === undefined || level === undefined) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: 'SportId, score e level são obrigatórios'\r\n      });\r\n    }\r\n\r\n    if (score < 0 || level < 1) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: 'Score deve ser >= 0 e level >= 1'\r\n      });\r\n    }\r\n\r\n    // Verificar se o esporte existe\r\n    const sport = await prisma.sport.findUnique({\r\n      where: { id: sportId }\r\n    });\r\n\r\n    if (!sport) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'Esporte não encontrado'\r\n      });\r\n    }\r\n\r\n    // Verificar se o usuário está inscrito no esporte\r\n    const userSport = await prisma.userSport.findFirst({\r\n      where: {\r\n        userId,\r\n        sportId,\r\n        isActive: true\r\n      }\r\n    });\r\n\r\n    if (!userSport) {\r\n      return res.status(403).json({\r\n        success: false,\r\n        message: 'Você precisa estar inscrito no esporte para registrar pontuação'\r\n      });\r\n    }\r\n\r\n    // Buscar pontuação anterior\r\n    const existingScore = await prisma.userScore.findFirst({\r\n      where: {\r\n        userId,\r\n        sportId\r\n      },\r\n      orderBy: { createdAt: 'desc' }\r\n    });\r\n\r\n    // Se a nova pontuação for maior, atualizar\r\n    if (existingScore && score <= existingScore.score) {\r\n      return res.json({\r\n        success: true,\r\n        message: 'Pontuação não foi atualizada (não é maior que a anterior)',\r\n        data: { userScore: existingScore }\r\n      });\r\n    }\r\n\r\n    // Criar ou atualizar pontuação\r\n    const userScore = await prisma.userScore.upsert({\r\n      where: {\r\n        userId_sportId: {\r\n          userId,\r\n          sportId\r\n        }\r\n      },\r\n      update: {\r\n        score,\r\n        level\r\n      },\r\n      create: {\r\n        userId,\r\n        sportId,\r\n        score,\r\n        level\r\n      },\r\n      include: {\r\n        sport: {\r\n          select: {\r\n            id: true,\r\n            name: true,\r\n            icon: true,\r\n            color: true\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    res.json({\r\n      success: true,\r\n      message: 'Pontuação registrada com sucesso',\r\n      data: { userScore }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Erro ao registrar pontuação:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Erro interno do servidor'\r\n    });\r\n  }\r\n});\r\n\r\n// Buscar pontuações do usuário\r\nrouter.get('/user', authenticateToken, async (req, res) => {\r\n  try {\r\n    const userId = req.user.userId;\r\n    const { limit = 20, offset = 0 } = req.query;\r\n\r\n    const userScores = await prisma.userScore.findMany({\r\n      where: { userId },\r\n      include: {\r\n        sport: {\r\n          select: {\r\n            id: true,\r\n            name: true,\r\n            icon: true,\r\n            color: true\r\n          }\r\n        }\r\n      },\r\n      orderBy: { score: 'desc' },\r\n      take: parseInt(limit),\r\n      skip: parseInt(offset)\r\n    });\r\n\r\n    const totalCount = await prisma.userScore.count({\r\n      where: { userId }\r\n    });\r\n\r\n    res.json({\r\n      success: true,\r\n      data: {\r\n        userScores,\r\n        pagination: {\r\n          total: totalCount,\r\n          limit: parseInt(limit),\r\n          offset: parseInt(offset),\r\n          hasMore: (parseInt(offset) + parseInt(limit)) < totalCount\r\n        }\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Erro ao buscar pontuações do usuário:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Erro interno do servidor'\r\n    });\r\n  }\r\n});\r\n\r\n// Buscar pontuação específica do usuário em um esporte\r\nrouter.get('/user/:sportId', authenticateToken, async (req, res) => {\r\n  try {\r\n    const { sportId } = req.params;\r\n    const userId = req.user.userId;\r\n\r\n    const userScore = await prisma.userScore.findFirst({\r\n      where: {\r\n        userId,\r\n        sportId\r\n      },\r\n      include: {\r\n        sport: {\r\n          select: {\r\n            id: true,\r\n            name: true,\r\n            icon: true,\r\n            color: true\r\n          }\r\n        }\r\n      },\r\n      orderBy: { createdAt: 'desc' }\r\n    });\r\n\r\n    if (!userScore) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'Pontuação não encontrada para este esporte'\r\n      });\r\n    }\r\n\r\n    res.json({\r\n      success: true,\r\n      data: { userScore }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Erro ao buscar pontuação específica:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Erro interno do servidor'\r\n    });\r\n  }\r\n});\r\n\r\n// Buscar ranking geral\r\nrouter.get('/ranking', async (req, res) => {\r\n  try {\r\n    const { sportId, limit = 50, offset = 0 } = req.query;\r\n\r\n    const whereClause = sportId ? { sportId } : {};\r\n\r\n    const rankings = await prisma.userScore.findMany({\r\n      where: whereClause,\r\n      include: {\r\n        user: {\r\n          select: {\r\n            id: true,\r\n            name: true,\r\n            avatar: true\r\n          }\r\n        },\r\n        sport: {\r\n          select: {\r\n            id: true,\r\n            name: true,\r\n            icon: true,\r\n            color: true\r\n          }\r\n        }\r\n      },\r\n      orderBy: [\r\n        { score: 'desc' },\r\n        { level: 'desc' },\r\n        { createdAt: 'asc' }\r\n      ],\r\n      take: parseInt(limit),\r\n      skip: parseInt(offset)\r\n    });\r\n\r\n    const totalCount = await prisma.userScore.count({\r\n      where: whereClause\r\n    });\r\n\r\n    res.json({\r\n      success: true,\r\n      data: {\r\n        rankings,\r\n        pagination: {\r\n          total: totalCount,\r\n          limit: parseInt(limit),\r\n          offset: parseInt(offset),\r\n          hasMore: (parseInt(offset) + parseInt(limit)) < totalCount\r\n        }\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Erro ao buscar ranking:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Erro interno do servidor'\r\n    });\r\n  }\r\n});\r\n\r\n// Buscar estatísticas de pontuação\r\nrouter.get('/stats', authenticateToken, async (req, res) => {\r\n  try {\r\n    const userId = req.user.userId;\r\n\r\n    const [\r\n      totalScores,\r\n      averageScore,\r\n      highestScore,\r\n      totalLevels,\r\n      scoresBySport\r\n    ] = await Promise.all([\r\n      prisma.userScore.count({\r\n        where: { userId }\r\n      }),\r\n      prisma.userScore.aggregate({\r\n        where: { userId },\r\n        _avg: { score: true }\r\n      }),\r\n      prisma.userScore.findFirst({\r\n        where: { userId },\r\n        orderBy: { score: 'desc' },\r\n        include: {\r\n          sport: {\r\n            select: {\r\n              name: true,\r\n              icon: true,\r\n              color: true\r\n            }\r\n          }\r\n        }\r\n      }),\r\n      prisma.userScore.aggregate({\r\n        where: { userId },\r\n        _sum: { level: true }\r\n      }),\r\n      prisma.userScore.groupBy({\r\n        by: ['sportId'],\r\n        where: { userId },\r\n        _max: { score: true },\r\n        _sum: { level: true },\r\n        orderBy: { _max: { score: 'desc' } }\r\n      })\r\n    ]);\r\n\r\n    res.json({\r\n      success: true,\r\n      data: {\r\n        totalScores,\r\n        averageScore: averageScore._avg.score || 0,\r\n        highestScore: highestScore || null,\r\n        totalLevels: totalLevels._sum.level || 0,\r\n        scoresBySport\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Erro ao buscar estatísticas:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Erro interno do servidor'\r\n    });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}