{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useState, useEffect } from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport Storage from \"./src/utils/storage\";\nimport apiService from \"./src/services/apiService\";\nimport LoginScreen from \"./LoginScreen\";\nimport HomeScreen from \"./HomeScreen\";\nimport RankingScreen from \"./RankingScreen\";\nimport TutorialScreen from \"./TutorialScreen\";\nimport ChatScreen from \"./ChatScreen\";\nimport RegisterScreen from \"./RegisterScreen\";\nimport TeacherRegisterScreen from \"./TeacherRegisterScreen\";\nimport MedalsScreen from \"./MedalsScreen\";\nimport AchievementsScreen from \"./AchievementsScreen\";\nimport TeacherScheduleScreen from \"./TeacherScheduleScreen\";\nimport TeacherClassesScreen from \"./TeacherClassesScreen\";\nimport CreateClassScreen from \"./CreateClassScreen\";\nimport ClassScreen from \"./ClassScreen\";\nimport ClassManagementScreen from \"./ClassManagementScreen\";\nimport InstitutionRegisterScreen from \"./InstitutionRegisterScreen\";\nimport InstitutionLoginScreen from \"./InstitutionLoginScreen\";\nimport InstitutionDashboardScreen from \"./InstitutionDashboardScreen\";\nimport { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isAuthenticated = _useState2[0],\n    setIsAuthenticated = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    currentUser = _useState4[0],\n    setCurrentUser = _useState4[1];\n  var _useState5 = useState('login'),\n    _useState6 = _slicedToArray(_useState5, 2),\n    currentScreen = _useState6[0],\n    setCurrentScreen = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    isMenuVisible = _useState8[0],\n    setIsMenuVisible = _useState8[1];\n  var _useState9 = useState(true),\n    _useState0 = _slicedToArray(_useState9, 2),\n    isLoading = _useState0[0],\n    setIsLoading = _useState0[1];\n  var _useState1 = useState(false),\n    _useState10 = _slicedToArray(_useState1, 2),\n    showSuccessMessage = _useState10[0],\n    setShowSuccessMessage = _useState10[1];\n  useEffect(function () {\n    checkAuthStatus();\n  }, []);\n  var checkAuthStatus = function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        var token = yield Storage.getItem('authToken');\n        if (token) {\n          apiService.setToken(token);\n          var response = yield apiService.verifyToken();\n          if (response.success) {\n            setCurrentUser(response.data.user);\n            setIsAuthenticated(true);\n          } else {\n            yield Storage.removeItem('authToken');\n            apiService.clearToken();\n          }\n        }\n      } catch (error) {\n        console.error('Error checking auth status:', error);\n        yield Storage.removeItem('authToken');\n        apiService.clearToken();\n      } finally {\n        setIsLoading(false);\n      }\n    });\n    return function checkAuthStatus() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var handleLogin = function () {\n    var _ref2 = _asyncToGenerator(function* (userData) {\n      try {\n        var response = yield apiService.login(userData.email, userData.password, userData.userType);\n        if (response.success) {\n          yield Storage.setItem('authToken', response.data.token);\n          apiService.setToken(response.data.token);\n          setCurrentUser(response.data.user);\n          setIsAuthenticated(true);\n          setCurrentScreen('home');\n        } else {\n          throw new Error(response.message || 'Erro no login');\n        }\n      } catch (error) {\n        console.error('Login error:', error);\n        throw error;\n      }\n    });\n    return function handleLogin(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var handleInstitutionLogin = function () {\n    var _ref3 = _asyncToGenerator(function* (institutionData, userType) {\n      try {\n        if (institutionData.id && institutionData.name) {\n          var token = localStorage.getItem('token');\n          if (token) {\n            apiService.setToken(token);\n            yield Storage.setItem('authToken', token);\n          }\n          var institutionWithType = _objectSpread(_objectSpread({}, institutionData), {}, {\n            userType: 'INSTITUTION'\n          });\n          setCurrentUser(institutionWithType);\n          setIsAuthenticated(true);\n          setCurrentScreen('institutionDashboard');\n          return;\n        }\n        var response = yield apiService.loginInstitution(institutionData.email, institutionData.password);\n        if (response.success) {\n          yield Storage.setItem('authToken', response.data.token);\n          apiService.setToken(response.data.token);\n          var _institutionWithType = _objectSpread(_objectSpread({}, response.data.institution), {}, {\n            userType: 'INSTITUTION'\n          });\n          setCurrentUser(_institutionWithType);\n          setIsAuthenticated(true);\n          setCurrentScreen('institutionDashboard');\n        } else {\n          throw new Error(response.message || 'Erro no login da instituição');\n        }\n      } catch (error) {\n        console.error('Institution login error:', error);\n        throw error;\n      }\n    });\n    return function handleInstitutionLogin(_x2, _x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var handleRegister = function () {\n    var _ref4 = _asyncToGenerator(function* (userData) {\n      console.log('🔵 App.js handleRegister chamado com:', userData);\n      try {\n        console.log('📡 Chamando apiService.register...');\n        var response = yield apiService.register(userData);\n        console.log('📡 Resposta da API:', response);\n        if (response.success) {\n          console.log('✅ Cadastro bem-sucedido, redirecionando para login');\n          setCurrentScreen('login');\n          return {\n            success: true,\n            message: 'Cadastro realizado com sucesso! Agora você pode fazer login.'\n          };\n        } else {\n          console.log('❌ Resposta não foi bem-sucedida:', response);\n          throw new Error(response.message || 'Erro no cadastro');\n        }\n      } catch (error) {\n        console.error('❌ Register error:', error);\n        throw error;\n      }\n    });\n    return function handleRegister(_x4) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  var handleLogout = function () {\n    var _ref5 = _asyncToGenerator(function* () {\n      try {\n        yield apiService.logout();\n        yield Storage.removeItem('authToken');\n        apiService.clearToken();\n        setCurrentUser(null);\n        setIsAuthenticated(false);\n        setCurrentScreen('home');\n      } catch (error) {\n        console.error('Error logging out:', error);\n      }\n    });\n    return function handleLogout() {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  var navigateToScreen = function navigateToScreen(screen) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    setCurrentScreen(screen);\n    setIsMenuVisible(false);\n    if (params && Object.keys(params).length > 0) {\n      window.navigationParams = params;\n    }\n  };\n  var navigateToRegister = function navigateToRegister() {\n    setCurrentScreen('register');\n  };\n  var navigateToTeacherRegister = function navigateToTeacherRegister() {\n    setCurrentScreen('teacherRegister');\n  };\n  var navigateToInstitutionRegister = function navigateToInstitutionRegister() {\n    setCurrentScreen('institutionRegister');\n  };\n  var navigateToInstitutionLogin = function navigateToInstitutionLogin() {\n    setCurrentScreen('institutionLogin');\n  };\n  var navigateToLogin = function navigateToLogin() {\n    setCurrentScreen('login');\n    setShowSuccessMessage(true);\n  };\n  var renderScreen = function renderScreen() {\n    if (isLoading) {\n      return null;\n    }\n    if (!isAuthenticated) {\n      if (currentScreen === 'register') {\n        return _jsx(RegisterScreen, {\n          onRegister: handleRegister,\n          onNavigateToLogin: navigateToLogin\n        });\n      }\n      if (currentScreen === 'teacherRegister') {\n        return _jsx(TeacherRegisterScreen, {\n          onRegister: handleRegister,\n          onNavigateToLogin: navigateToLogin\n        });\n      }\n      if (currentScreen === 'institutionRegister') {\n        return _jsx(InstitutionRegisterScreen, {\n          onNavigate: navigateToScreen,\n          onLogin: handleLogin\n        });\n      }\n      if (currentScreen === 'institutionLogin') {\n        return _jsx(InstitutionLoginScreen, {\n          onNavigate: navigateToScreen,\n          onLogin: handleInstitutionLogin\n        });\n      }\n      return _jsx(LoginScreen, {\n        onLogin: handleLogin,\n        onNavigateToRegister: navigateToRegister,\n        onNavigateToTeacherRegister: navigateToTeacherRegister,\n        onNavigateToInstitutionRegister: navigateToInstitutionRegister,\n        onNavigateToInstitutionLogin: navigateToInstitutionLogin,\n        showSuccessMessage: showSuccessMessage,\n        onSuccessMessageShown: function onSuccessMessageShown() {\n          return setShowSuccessMessage(false);\n        }\n      });\n    }\n    switch (currentScreen) {\n      case 'ranking':\n        return _jsx(RankingScreen, {\n          isMenuVisible: isMenuVisible,\n          setIsMenuVisible: setIsMenuVisible,\n          onNavigate: navigateToScreen,\n          currentUser: currentUser\n        });\n      case 'tutorial':\n        return _jsx(TutorialScreen, {\n          isMenuVisible: isMenuVisible,\n          setIsMenuVisible: setIsMenuVisible,\n          onNavigate: navigateToScreen,\n          currentUser: currentUser\n        });\n      case 'chat':\n        return _jsx(ChatScreen, {\n          isMenuVisible: isMenuVisible,\n          setIsMenuVisible: setIsMenuVisible,\n          onNavigate: navigateToScreen,\n          currentUser: currentUser\n        });\n      case 'medals':\n        return _jsx(MedalsScreen, {\n          isMenuVisible: isMenuVisible,\n          setIsMenuVisible: setIsMenuVisible,\n          onNavigate: navigateToScreen,\n          currentUser: currentUser\n        });\n      case 'achievements':\n        return _jsx(AchievementsScreen, {\n          isMenuVisible: isMenuVisible,\n          setIsMenuVisible: setIsMenuVisible,\n          onNavigate: navigateToScreen,\n          currentUser: currentUser\n        });\n      case 'register':\n        return _jsx(RegisterScreen, {\n          isMenuVisible: isMenuVisible,\n          setIsMenuVisible: setIsMenuVisible,\n          onNavigate: navigateToScreen,\n          onRegister: handleRegister,\n          currentUser: currentUser\n        });\n      case 'schedule':\n        return _jsx(TeacherScheduleScreen, {\n          isMenuVisible: isMenuVisible,\n          setIsMenuVisible: setIsMenuVisible,\n          onNavigate: navigateToScreen,\n          currentUser: currentUser,\n          onLogout: handleLogout\n        });\n      case 'classes':\n        return _jsx(TeacherClassesScreen, {\n          isMenuVisible: isMenuVisible,\n          setIsMenuVisible: setIsMenuVisible,\n          onNavigate: navigateToScreen,\n          currentUser: currentUser,\n          onLogout: handleLogout\n        });\n      case 'createClass':\n        return _jsx(CreateClassScreen, {\n          isMenuVisible: isMenuVisible,\n          setIsMenuVisible: setIsMenuVisible,\n          onNavigate: navigateToScreen,\n          currentUser: currentUser,\n          onLogout: handleLogout\n        });\n      case 'class':\n        return _jsx(ClassScreen, {\n          isMenuVisible: isMenuVisible,\n          setIsMenuVisible: setIsMenuVisible,\n          onNavigate: navigateToScreen,\n          currentUser: currentUser,\n          onLogout: handleLogout\n        });\n      case 'classManagement':\n        return _jsx(ClassManagementScreen, {\n          isMenuVisible: isMenuVisible,\n          setIsMenuVisible: setIsMenuVisible,\n          onNavigate: navigateToScreen,\n          currentUser: currentUser,\n          onLogout: handleLogout\n        });\n      case 'institutionDashboard':\n        return _jsx(InstitutionDashboardScreen, {\n          isMenuVisible: isMenuVisible,\n          setIsMenuVisible: setIsMenuVisible,\n          onNavigate: navigateToScreen,\n          currentUser: currentUser,\n          onLogout: handleLogout\n        });\n      default:\n        if (currentUser && currentUser.userType === 'TEACHER') {\n          return _jsx(TeacherScheduleScreen, {\n            isMenuVisible: isMenuVisible,\n            setIsMenuVisible: setIsMenuVisible,\n            onNavigate: navigateToScreen,\n            currentUser: currentUser,\n            onLogout: handleLogout\n          });\n        }\n        if (currentUser && currentUser.userType === 'INSTITUTION') {\n          return _jsx(InstitutionDashboardScreen, {\n            isMenuVisible: isMenuVisible,\n            setIsMenuVisible: setIsMenuVisible,\n            onNavigate: navigateToScreen,\n            currentUser: currentUser,\n            onLogout: handleLogout\n          });\n        }\n        return _jsx(HomeScreen, {\n          isMenuVisible: isMenuVisible,\n          setIsMenuVisible: setIsMenuVisible,\n          onNavigate: navigateToScreen,\n          currentUser: currentUser,\n          onLogout: handleLogout\n        });\n    }\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(StatusBar, {\n      style: \"dark\",\n      backgroundColor: \"#E9EEEE\"\n    }), renderScreen()]\n  });\n}","map":{"version":3,"names":["React","useState","useEffect","StatusBar","Storage","apiService","LoginScreen","HomeScreen","RankingScreen","TutorialScreen","ChatScreen","RegisterScreen","TeacherRegisterScreen","MedalsScreen","AchievementsScreen","TeacherScheduleScreen","TeacherClassesScreen","CreateClassScreen","ClassScreen","ClassManagementScreen","InstitutionRegisterScreen","InstitutionLoginScreen","InstitutionDashboardScreen","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","App","_useState","_useState2","_slicedToArray","isAuthenticated","setIsAuthenticated","_useState3","_useState4","currentUser","setCurrentUser","_useState5","_useState6","currentScreen","setCurrentScreen","_useState7","_useState8","isMenuVisible","setIsMenuVisible","_useState9","_useState0","isLoading","setIsLoading","_useState1","_useState10","showSuccessMessage","setShowSuccessMessage","checkAuthStatus","_ref","_asyncToGenerator","token","getItem","setToken","response","verifyToken","success","data","user","removeItem","clearToken","error","console","apply","arguments","handleLogin","_ref2","userData","login","email","password","userType","setItem","Error","message","_x","handleInstitutionLogin","_ref3","institutionData","id","name","localStorage","institutionWithType","_objectSpread","loginInstitution","institution","_x2","_x3","handleRegister","_ref4","log","register","_x4","handleLogout","_ref5","logout","navigateToScreen","screen","params","length","undefined","Object","keys","window","navigationParams","navigateToRegister","navigateToTeacherRegister","navigateToInstitutionRegister","navigateToInstitutionLogin","navigateToLogin","renderScreen","onRegister","onNavigateToLogin","onNavigate","onLogin","onNavigateToRegister","onNavigateToTeacherRegister","onNavigateToInstitutionRegister","onNavigateToInstitutionLogin","onSuccessMessageShown","onLogout","children","style","backgroundColor"],"sources":["C:/Users/lukag/OneDrive/Área de Trabalho/Muvz_App/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport Storage from './src/utils/storage'; // Custom storage wrapper\nimport apiService from './src/services/apiService';\nimport LoginScreen from './LoginScreen';\nimport HomeScreen from './HomeScreen';\nimport RankingScreen from './RankingScreen';\nimport TutorialScreen from './TutorialScreen';\nimport ChatScreen from './ChatScreen';\nimport RegisterScreen from './RegisterScreen';\nimport TeacherRegisterScreen from './TeacherRegisterScreen';\nimport MedalsScreen from './MedalsScreen';\nimport AchievementsScreen from './AchievementsScreen';\nimport TeacherScheduleScreen from './TeacherScheduleScreen';\nimport TeacherClassesScreen from './TeacherClassesScreen';\nimport CreateClassScreen from './CreateClassScreen';\nimport ClassScreen from './ClassScreen';\nimport ClassManagementScreen from './ClassManagementScreen';\nimport InstitutionRegisterScreen from './InstitutionRegisterScreen';\nimport InstitutionLoginScreen from './InstitutionLoginScreen';\nimport InstitutionDashboardScreen from './InstitutionDashboardScreen';\n\nexport default function App() {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [currentScreen, setCurrentScreen] = useState('login');\n  const [isMenuVisible, setIsMenuVisible] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n\n  // Verificar se há usuário logado ao iniciar o app\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n\n  const checkAuthStatus = async () => {\n    try {\n      // Verificar se há token salvo\n      const token = await Storage.getItem('authToken');\n      if (token) {\n        apiService.setToken(token);\n        \n        // Verificar se o token ainda é válido\n        const response = await apiService.verifyToken();\n        if (response.success) {\n          setCurrentUser(response.data.user);\n          setIsAuthenticated(true);\n        } else {\n          // Token inválido, limpar\n          await Storage.removeItem('authToken');\n          apiService.clearToken();\n        }\n      }\n    } catch (error) {\n      console.error('Error checking auth status:', error);\n      // Em caso de erro, limpar token\n      await Storage.removeItem('authToken');\n      apiService.clearToken();\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleLogin = async (userData) => {\n    try {\n      const response = await apiService.login(userData.email, userData.password, userData.userType);\n      if (response.success) {\n        // Salvar token\n        await Storage.setItem('authToken', response.data.token);\n        apiService.setToken(response.data.token);\n        \n        setCurrentUser(response.data.user);\n        setIsAuthenticated(true);\n        setCurrentScreen('home');\n      } else {\n        // Se não foi sucesso, lançar erro com a mensagem da API\n        throw new Error(response.message || 'Erro no login');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  };\n\n  const handleInstitutionLogin = async (institutionData, userType) => {\n    try {\n      // Se institutionData já contém os dados da instituição (vem do login bem-sucedido)\n      if (institutionData.id && institutionData.name) {\n        // Configurar token do localStorage\n        const token = localStorage.getItem('token');\n        if (token) {\n          apiService.setToken(token);\n          // Também salvar no Storage para consistência\n          await Storage.setItem('authToken', token);\n        }\n        \n        // Adicionar userType ao objeto da instituição\n        const institutionWithType = {\n          ...institutionData,\n          userType: 'INSTITUTION'\n        };\n        \n        setCurrentUser(institutionWithType);\n        setIsAuthenticated(true);\n        setCurrentScreen('institutionDashboard');\n        return;\n      }\n      \n      // Se institutionData contém email e senha (login inicial)\n      const response = await apiService.loginInstitution(institutionData.email, institutionData.password);\n      if (response.success) {\n        // Salvar token\n        await Storage.setItem('authToken', response.data.token);\n        apiService.setToken(response.data.token);\n        \n        // Adicionar userType ao objeto da instituição\n        const institutionWithType = {\n          ...response.data.institution,\n          userType: 'INSTITUTION'\n        };\n        \n        setCurrentUser(institutionWithType);\n        setIsAuthenticated(true);\n        setCurrentScreen('institutionDashboard');\n      } else {\n        // Se não foi sucesso, lançar erro com a mensagem da API\n        throw new Error(response.message || 'Erro no login da instituição');\n      }\n    } catch (error) {\n      console.error('Institution login error:', error);\n      throw error;\n    }\n  };\n\n  const handleRegister = async (userData) => {\n    console.log('🔵 App.js handleRegister chamado com:', userData);\n    try {\n      console.log('📡 Chamando apiService.register...');\n      const response = await apiService.register(userData);\n      console.log('📡 Resposta da API:', response);\n      \n      if (response.success) {\n        console.log('✅ Cadastro bem-sucedido, redirecionando para login');\n        // Após cadastro bem-sucedido, redirecionar para login\n        setCurrentScreen('login');\n        return { success: true, message: 'Cadastro realizado com sucesso! Agora você pode fazer login.' };\n      } else {\n        console.log('❌ Resposta não foi bem-sucedida:', response);\n        throw new Error(response.message || 'Erro no cadastro');\n      }\n    } catch (error) {\n      console.error('❌ Register error:', error);\n      throw error;\n    }\n  };\n\n  const handleLogout = async () => {\n    try {\n      await apiService.logout();\n      await Storage.removeItem('authToken');\n      apiService.clearToken();\n      \n      setCurrentUser(null);\n      setIsAuthenticated(false);\n      setCurrentScreen('home');\n    } catch (error) {\n      console.error('Error logging out:', error);\n    }\n  };\n\n  const navigateToScreen = (screen, params = {}) => {\n    setCurrentScreen(screen);\n    setIsMenuVisible(false);\n    // Armazenar parâmetros para uso nas telas\n    if (params && Object.keys(params).length > 0) {\n      // Para este exemplo simples, vamos usar um estado global\n      // Em uma aplicação real, você usaria React Navigation\n      window.navigationParams = params;\n    }\n  };\n\n  const navigateToRegister = () => {\n    setCurrentScreen('register');\n  };\n\n  const navigateToTeacherRegister = () => {\n    setCurrentScreen('teacherRegister');\n  };\n\n  const navigateToInstitutionRegister = () => {\n    setCurrentScreen('institutionRegister');\n  };\n\n  const navigateToInstitutionLogin = () => {\n    setCurrentScreen('institutionLogin');\n  };\n\n  const navigateToLogin = () => {\n    setCurrentScreen('login');\n    setShowSuccessMessage(true);\n  };\n\n  const renderScreen = () => {\n    if (isLoading) {\n      return null; // Ou um componente de loading\n    }\n\n    if (!isAuthenticated) {\n      if (currentScreen === 'register') {\n        return <RegisterScreen onRegister={handleRegister} onNavigateToLogin={navigateToLogin} />;\n      }\n      if (currentScreen === 'teacherRegister') {\n        return <TeacherRegisterScreen onRegister={handleRegister} onNavigateToLogin={navigateToLogin} />;\n      }\n      if (currentScreen === 'institutionRegister') {\n        return <InstitutionRegisterScreen onNavigate={navigateToScreen} onLogin={handleLogin} />;\n      }\n      if (currentScreen === 'institutionLogin') {\n        return <InstitutionLoginScreen onNavigate={navigateToScreen} onLogin={handleInstitutionLogin} />;\n      }\n      return <LoginScreen \n        onLogin={handleLogin} \n        onNavigateToRegister={navigateToRegister} \n        onNavigateToTeacherRegister={navigateToTeacherRegister}\n        onNavigateToInstitutionRegister={navigateToInstitutionRegister}\n        onNavigateToInstitutionLogin={navigateToInstitutionLogin}\n        showSuccessMessage={showSuccessMessage} \n        onSuccessMessageShown={() => setShowSuccessMessage(false)} \n      />;\n    }\n\n    switch (currentScreen) {\n      case 'ranking':\n        return <RankingScreen isMenuVisible={isMenuVisible} setIsMenuVisible={setIsMenuVisible} onNavigate={navigateToScreen} currentUser={currentUser} />;\n      case 'tutorial':\n        return <TutorialScreen isMenuVisible={isMenuVisible} setIsMenuVisible={setIsMenuVisible} onNavigate={navigateToScreen} currentUser={currentUser} />;\n      case 'chat':\n        return <ChatScreen isMenuVisible={isMenuVisible} setIsMenuVisible={setIsMenuVisible} onNavigate={navigateToScreen} currentUser={currentUser} />;\n      case 'medals':\n        return <MedalsScreen isMenuVisible={isMenuVisible} setIsMenuVisible={setIsMenuVisible} onNavigate={navigateToScreen} currentUser={currentUser} />;\n      case 'achievements':\n        return <AchievementsScreen isMenuVisible={isMenuVisible} setIsMenuVisible={setIsMenuVisible} onNavigate={navigateToScreen} currentUser={currentUser} />;\n      case 'register':\n        return <RegisterScreen isMenuVisible={isMenuVisible} setIsMenuVisible={setIsMenuVisible} onNavigate={navigateToScreen} onRegister={handleRegister} currentUser={currentUser} />;\n      case 'schedule':\n        return <TeacherScheduleScreen isMenuVisible={isMenuVisible} setIsMenuVisible={setIsMenuVisible} onNavigate={navigateToScreen} currentUser={currentUser} onLogout={handleLogout} />;\n      case 'classes':\n        return <TeacherClassesScreen isMenuVisible={isMenuVisible} setIsMenuVisible={setIsMenuVisible} onNavigate={navigateToScreen} currentUser={currentUser} onLogout={handleLogout} />;\n      case 'createClass':\n        return <CreateClassScreen isMenuVisible={isMenuVisible} setIsMenuVisible={setIsMenuVisible} onNavigate={navigateToScreen} currentUser={currentUser} onLogout={handleLogout} />;\n      case 'class':\n        return <ClassScreen isMenuVisible={isMenuVisible} setIsMenuVisible={setIsMenuVisible} onNavigate={navigateToScreen} currentUser={currentUser} onLogout={handleLogout} />;\n      case 'classManagement':\n        return <ClassManagementScreen isMenuVisible={isMenuVisible} setIsMenuVisible={setIsMenuVisible} onNavigate={navigateToScreen} currentUser={currentUser} onLogout={handleLogout} />;\n      case 'institutionDashboard':\n        return <InstitutionDashboardScreen isMenuVisible={isMenuVisible} setIsMenuVisible={setIsMenuVisible} onNavigate={navigateToScreen} currentUser={currentUser} onLogout={handleLogout} />;\n      default:\n        // Para professores, mostrar agenda como tela inicial\n        if (currentUser && currentUser.userType === 'TEACHER') {\n          return <TeacherScheduleScreen isMenuVisible={isMenuVisible} setIsMenuVisible={setIsMenuVisible} onNavigate={navigateToScreen} currentUser={currentUser} onLogout={handleLogout} />;\n        }\n        // Para instituições, mostrar dashboard\n        if (currentUser && currentUser.userType === 'INSTITUTION') {\n          return <InstitutionDashboardScreen isMenuVisible={isMenuVisible} setIsMenuVisible={setIsMenuVisible} onNavigate={navigateToScreen} currentUser={currentUser} onLogout={handleLogout} />;\n        }\n        return <HomeScreen isMenuVisible={isMenuVisible} setIsMenuVisible={setIsMenuVisible} onNavigate={navigateToScreen} currentUser={currentUser} onLogout={handleLogout} />;\n    }\n  };\n\n  return (\n    <>\n      <StatusBar style=\"dark\" backgroundColor=\"#E9EEEE\" />\n      {renderScreen()}\n    </>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}